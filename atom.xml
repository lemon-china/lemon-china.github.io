<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wei Echo</title>
  
  <subtitle>高效稳定 · 简洁易用 · 灵活扩展</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/weiecho/"/>
  <updated>2020-09-01T09:16:16.019Z</updated>
  <id>https://github.com/weiecho/</id>
  
  <author>
    <name>Wei Echo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins集成SonarQube代码质量分析平台</title>
    <link href="https://github.com/weiecho/2020/09/01/stu_1118/"/>
    <id>https://github.com/weiecho/2020/09/01/stu_1118/</id>
    <published>2020-09-01T09:02:25.000Z</published>
    <updated>2020-09-01T09:16:16.019Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SonarQube 是一个开源的代码质量分析平台，便于管理代码的质量，可检查出项目代码的漏洞和潜在的逻辑问题。同时，它提供了丰富的插件，支持多种语言的检测， 如 Java、Python、Groovy、C、C++等几十种编程语言的检测。</p></blockquote><h5 id="SonarQube主要的核心价值体现在如下几个方面："><a href="#SonarQube主要的核心价值体现在如下几个方面：" class="headerlink" title="SonarQube主要的核心价值体现在如下几个方面："></a>SonarQube主要的核心价值体现在如下几个方面：</h5><p>检查代码是否遵循编程标准：如命名规范，编写的规范等。</p><p>检查设计存在的潜在缺陷：SonarQube 通过插件 Findbugs、Checkstyle 等工具检测代码存在的缺陷。</p><p>检测代码的重复代码量：SonarQube 可 以展示项目中存在大量复制粘贴的代码。</p><p>检测代码中注释的程度：源码注释过多或者太少都不好，影响程序的可读可理解性。</p><p>检测代码中包、类之间的关系：分析类之间的关系是否合理，复杂度情况。</p><p><img src="/img/stu/12389382821.png" alt="SonarQube 4大组件"></p><h5 id="一个SonarQube服务器启动3个主要流程："><a href="#一个SonarQube服务器启动3个主要流程：" class="headerlink" title="一个SonarQube服务器启动3个主要流程："></a>一个SonarQube服务器启动3个主要流程：</h5><p>Web服务器，供开发人员，管理人员浏览高质量快照并配置SonarQube实例</p><p>基于Elasticsearch的Search Server从UI返回搜索</p><p>计算引擎服务器负责处理代码分析报告并将其保存在SonarQube数据库中</p><h5 id="一个SonarQube数据库存储："><a href="#一个SonarQube数据库存储：" class="headerlink" title="一个SonarQube数据库存储："></a>一个SonarQube数据库存储：</h5><p>SonarQube实例的配置（安全性，插件设置等）</p><p>项目，视图等的质量快照</p><h5 id="服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和治理插件"><a href="#服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和治理插件" class="headerlink" title="服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和治理插件"></a>服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和治理插件</h5><h5 id="在构建-持续集成服务器上运行一个或多个SonarScanner来分析项目"><a href="#在构建-持续集成服务器上运行一个或多个SonarScanner来分析项目" class="headerlink" title="在构建/持续集成服务器上运行一个或多个SonarScanner来分析项目"></a>在构建/持续集成服务器上运行一个或多个SonarScanner来分析项目</h5><p><img src="/img/stu/12323232312.png" alt="SonarQube 工作流程"></p><p>具体搭建使用参考：<br><a href="https://developer.ibm.com/zh/articles/1612-qusm-jenkins/" target="_blank" rel="noopener"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SonarQube 是一个开源的代码质量分析平台，便于管理代码的质量，可检查出项目代码的漏洞和潜在的逻辑问题。同时，它提供了丰富的插件，支持多种语言的检测， 如 Java、Python、Groovy、C、C++等几十种编程语言的检测。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo 项目源码结构</title>
    <link href="https://github.com/weiecho/2020/08/28/doc_1128/"/>
    <id>https://github.com/weiecho/2020/08/28/doc_1128/</id>
    <published>2020-08-28T08:24:16.000Z</published>
    <updated>2020-08-28T08:27:41.755Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p><img src="/img/doc/a392983293.png" alt="image" title="部署架构说明"></p><p>项目源码采用maven模块化切分，将所有功能划分为三大块：控制模块、组件模块、服务模块，通过三个大模块再细分具体大功能模块，通过pom控制核心组件的版本和功能，保障所有服务的功能规范统一。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo 部署架构说明</title>
    <link href="https://github.com/weiecho/2020/08/18/doc_1127/"/>
    <id>https://github.com/weiecho/2020/08/18/doc_1127/</id>
    <published>2020-08-18T10:27:35.000Z</published>
    <updated>2020-08-28T08:24:21.255Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><blockquote><p>用户访问APP、WEB、H5页面通过LBS算法调用到最佳的nginx服务器，nginx通过规则转发调用到指定的服务或服务网关，gatway经过鉴权、风控等安全校验后通过consul注册中心LB路由到指定的业务服务，业务服务根据需要调用对应的数据支持端、RPC服务短信或第三方服务端，完成业务功能后返回对应的数据。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/doc/a293092839.png" alt="image" title="部署架构说明">                </div>                <div class="image-caption">部署架构说明</div>            </figure><p>整个部署架构分为入口访问组、核心服务组、基础支撑组和服务监控组。</p><p>1、LBS域名指向服务域名，开通https、防ddocs等安全性功能。</p><p>2、入口访问组包含nginx、potal web、activity web、gateway服务，nginx需要开通外网流量权限，gateway需打通与核心业务组网段调用，potal web和activity web为前端网页服务，可视情况与nginx服务同机器部署或单独部署。</p><p>3、核心服务组根据各服务压测和预估QPS状况，部署相应量级的服务节点，为保障服务高可用，每个服务至少部署两个节点。</p><p>4、基础支撑组需开放核心业务组网络相互访问，部署consul注册中心集群，consul集群请独立部署并至少部署3个server节点和2+个client节点，DB至少保证主从节点配置，rabbitmq集群使用镜像模式保障服务的高可用，redis根据服务需要主从、集群部署，其他支持服务根据需要部署相应套件。</p><p>5、服务监控组需开放核心业务组网络相互访问，zabbix、prometheus、zipkin server根据服务需要部署相应节点套件，ELK部署至少3个master节点和3个data节点，数据节点建议内存30G，master节点建议10G，聚合节点等根据需要配置，日志类索引根据需要设置n*3个Primaries（如无特殊需要Replicas设置为0），日志索引名称按天存储。日志收集采用filebeat -&gt; kafka -&gt; logstash -&gt; elasticsearch套件，logstash路由pipeline简化配置和服务管理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo 规划架构说明</title>
    <link href="https://github.com/weiecho/2020/08/12/doc_1126/"/>
    <id>https://github.com/weiecho/2020/08/12/doc_1126/</id>
    <published>2020-08-12T15:11:35.000Z</published>
    <updated>2020-08-28T08:24:54.986Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><blockquote><p>lemon-echo架构考虑多设备、多应用场景，从应用入口区分了各类应用入口的控制和管理，在功能方面分为应用入口、服务网关、核心服务、公共模块、风控模块、运营管理后台、数据支持等模块。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/doc/a109928913.png" alt="image" title="规划架构说明">                </div>                <div class="image-caption">规划架构说明</div>            </figure><h5 id="应用入口"><a href="#应用入口" class="headerlink" title="应用入口"></a>应用入口</h5><p>应用入口可以接受APP、WEB、小程序、A应用、B应用、外部应用等应用接入，利用服务的项目管理功能可以实现无限扩展的应用接入方式，从而达到类中台的服务架构体系。</p><h5 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h5><p>服务网关主要考虑安全、流控、风控等风险因素，接入参数验证、身份验证、路由策略、流控策略、风控验证等安全模块，保障整体服务安全稳定运行。</p><h5 id="核心服务"><a href="#核心服务" class="headerlink" title="核心服务"></a>核心服务</h5><p>核心服务为项目主要业务服务，目前规划分为聚合服务、用户服务、帐户服务、商品服务、订单服务、交易服务、对账服务、清算服务、消息服务、授权服务、营销服务、售后服务等。市场运营需求可以增加推广服务、广告服务，即时沟通类需求可以扩展IM服务，直播类需求可以扩展直播服务，打赏服务等。</p><h5 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h5><p>公共模块作为业务的支持服务，主要包含授权服务、报警服务、消息服务、单号生成器、注册中心、配置中心、定时任务、分布式锁、分库分表模块，服务成熟后可逐步考虑接入生物识别、内容识别、数据服务等模块。</p><h5 id="风控模块"><a href="#风控模块" class="headerlink" title="风控模块"></a>风控模块</h5><p>风控模块为服务安全等核心领域，包含安全认证、资质审查、用户分级、黑白名单、风险预警、风险处置、支付风险、信用风险、征信相关等，可以根据需要完善该模块内容保障整体服务等安全性。</p><h5 id="运营管理后台"><a href="#运营管理后台" class="headerlink" title="运营管理后台"></a>运营管理后台</h5><p>运营管理后台为管理整个服务的入口，通过精确的权限管控分配用户是使用功能，对系统用户、帐户、订单、交易、对账、投诉等信息的查看和维护操作。</p><h5 id="数据支持"><a href="#数据支持" class="headerlink" title="数据支持"></a>数据支持</h5><p>数据支持分为内部数据支持和三方支持，其中内部数据支持包含mysql、redis、rabbit mq、promethes、elk、innerdb等，三方支持包含短信服务、消息服务、OSS文件存储、支付通道、实名认证、生物检测等功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo 概要说明</title>
    <link href="https://github.com/weiecho/2020/07/28/doc_1125/"/>
    <id>https://github.com/weiecho/2020/07/28/doc_1125/</id>
    <published>2020-07-28T12:21:55.000Z</published>
    <updated>2020-07-28T12:21:55.684Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>lemon-echo微服务架构是基于springcloud的微服务框架设计体系，以人员、时效、成本、品质为基础设计思路，极度适用于小中型开发设计团队，可通过简单调整扩展支持中大型开发设计团队。框架设计过程中整合实际项目经验，利用接口化、消息队列、模块化、服务化、异步化等技术方案保障服务稳定性和可扩展性。</p><p>根据互联网产品多年经验分析，我们的产品无论从任何角度为切入点，最终都希望完成用户支付-服务的闭环思维，在本架构体系设计时期直接将用户、帐户、商品、订单、交易、消息作为功能架构的基础模块体系，从而结合实际项目体系完成整体微服务体系搭建，以协助团队快速集成完善的开发结构体系。</p><p>依托功能预代入模式的完善架构体系思想，后续功能开发仅需对相应业务逻辑进行部分调整、增加对应的服务模块（如IM、聊天室等），利用类似二次开发方式极大降低开发团队的技术壁垒，降低微服务开发及治理难度，结合代码快速生成器可以在10分钟内完成简单功能开发，非常快发迭代开发的技术团队，尤其适用于50人以下的技术开发团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo HTTP状态码说明</title>
    <link href="https://github.com/weiecho/2020/07/27/doc_1124/"/>
    <id>https://github.com/weiecho/2020/07/27/doc_1124/</id>
    <published>2020-07-27T14:18:43.000Z</published>
    <updated>2020-07-24T06:03:59.173Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><h4 id="1、成功-2XX-（Successful-2XX）"><a href="#1、成功-2XX-（Successful-2XX）" class="headerlink" title="1、成功 2XX （Successful 2XX）"></a>1、成功 2XX （Successful 2XX）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">200 成功（OK）</span><br><span class="line">201 已创建（Created）</span><br><span class="line">202 已接受请求（Accepted）</span><br><span class="line">203 非权威性的信息（Non-Authoritative Information）</span><br><span class="line">204 无内容（No Content）</span><br><span class="line">205 重置内容（Reset Content）</span><br><span class="line">206 部分内容（Partial Content）</span><br></pre></td></tr></table></figure><h4 id="2、重定向-3XX-（Redirection-3XX）"><a href="#2、重定向-3XX-（Redirection-3XX）" class="headerlink" title="2、重定向 3XX （Redirection 3XX）"></a>2、重定向 3XX （Redirection 3XX）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">300 可选重定向（Multiple Choices）</span><br><span class="line">301 永久重定向（Moved Permanently）</span><br><span class="line">302 临时重定向（Found &#x2F; Moved Temporarily）</span><br><span class="line">303 看其他（See Other）</span><br><span class="line">304 未修改（Not Modified）</span><br><span class="line">305 必须使用代理（Use Proxy）</span><br><span class="line">306 未使用（Unused）</span><br><span class="line">307 临时重定向（Temporary Redirect）</span><br></pre></td></tr></table></figure><h4 id="3、客户端错误-4XX-（Client-Error-4XX）"><a href="#3、客户端错误-4XX-（Client-Error-4XX）" class="headerlink" title="3、客户端错误 4XX （Client Error 4XX）"></a>3、客户端错误 4XX （Client Error 4XX）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">400 请求异常（Bad Request）</span><br><span class="line">401 无授权（Unauthorized）</span><br><span class="line">402 所需付款 （Payment Required）</span><br><span class="line">403 禁止访问（Forbidden）</span><br><span class="line">404 地址不存在 （Not Found）</span><br><span class="line">405 方法不允许 （Method Not Allowed）</span><br><span class="line">406 非可接受的（Not Acceptable）</span><br><span class="line">407 需要代理身份验证（Proxy Authentication Required）</span><br><span class="line">408 请求超时 (Request Timeout)</span><br><span class="line">409 冲突(Conflict)</span><br><span class="line">410 网页已经失效（Gone）</span><br><span class="line">411 所需长度（Length Required ）</span><br><span class="line">412 先决条件失败（Precondition Failed）</span><br><span class="line">413 请求实体太大（Payload Too Large）</span><br><span class="line">414 请求URI太长（URI Too Long）</span><br><span class="line">415 不支持的媒体类型（Unsupported Media Type）</span><br><span class="line">416 不能满足所请求的范围（Requested Range Not Satisfiable）</span><br><span class="line">417 预期结果失败（Expectation Failed）</span><br></pre></td></tr></table></figure><h4 id="4、服务端错误-5XX（Server-Error-5XX）"><a href="#4、服务端错误-5XX（Server-Error-5XX）" class="headerlink" title="4、服务端错误 5XX（Server Error 5XX）"></a>4、服务端错误 5XX（Server Error 5XX）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">500 内部服务器错误（Internal Server Error）</span><br><span class="line">501 未执行（Not Implemented）</span><br><span class="line">502 坏网关 （Bad Gateway）</span><br><span class="line">503 服务不可用（Service Unavailable）</span><br><span class="line">504 网关超时（Gateway Timeout）</span><br><span class="line">505 不支持的HTTP版本（HTTP Version Not Supported ）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo异常码规则说明</title>
    <link href="https://github.com/weiecho/2020/07/25/doc_1123/"/>
    <id>https://github.com/weiecho/2020/07/25/doc_1123/</id>
    <published>2020-07-25T12:32:11.000Z</published>
    <updated>2020-07-24T06:00:30.510Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><h4 id="1、HTTP状态码"><a href="#1、HTTP状态码" class="headerlink" title="1、HTTP状态码"></a>1、HTTP状态码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 成功（OK）</span><br><span class="line">400 请求异常（Bad Request）</span><br><span class="line">401 未登录授权</span><br><span class="line">403 无访问权限</span><br><span class="line">500 内部服务器错误（Internal Server Error）</span><br></pre></td></tr></table></figure><h4 id="2、业务错误码（400-500）"><a href="#2、业务错误码（400-500）" class="headerlink" title="2、业务错误码（400/500）"></a>2、业务错误码（400/500）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">11201 参数异常（Incorrect Argument）</span><br><span class="line">11400 操作失败（Normal Error）</span><br><span class="line">11401 未登录授权（Unauthorized）</span><br><span class="line">11403 无访问权限（No Permission）</span><br><span class="line">11405 [服务器]运行时异常（Runtime Error）</span><br><span class="line">11406 [服务器]空值异常（NullPointer Error）</span><br><span class="line">11407 [服务器]IO异常（IO Error）</span><br><span class="line">11408 [服务器]数组越界异常（Array index out of bounds Error）</span><br><span class="line">11409 [服务器]网络异常（Socket Error）</span><br><span class="line">11429 服务器繁忙，请稍后再试（Too Many Requests）</span><br></pre></td></tr></table></figure><h4 id="3、其他业务服务"><a href="#3、其他业务服务" class="headerlink" title="3、其他业务服务"></a>3、其他业务服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">115XX 网关服务异常</span><br><span class="line">116XX 授权服务异常</span><br><span class="line">12XXX 用户服务异常</span><br><span class="line">13XXX 消息服务异常</span><br><span class="line">14XXX 交易服务异常</span><br><span class="line">15XXX 帐户服务异常</span><br><span class="line">16XXX 文件服务异常</span><br><span class="line">17XXX 售后服务异常</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo业务状态码说明</title>
    <link href="https://github.com/weiecho/2020/07/23/doc_1122/"/>
    <id>https://github.com/weiecho/2020/07/23/doc_1122/</id>
    <published>2020-07-23T05:54:06.000Z</published>
    <updated>2020-07-24T05:59:11.387Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><h4 id="1、单状态模式（0-9）"><a href="#1、单状态模式（0-9）" class="headerlink" title="1、单状态模式（0~9）"></a>1、单状态模式（0~9）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-1 全部</span><br><span class="line">0 待处理</span><br><span class="line">1 处理中</span><br><span class="line">5 已取消</span><br><span class="line">6 已关闭</span><br><span class="line">9 已完成</span><br><span class="line">其他为中间状态</span><br></pre></td></tr></table></figure><h4 id="2、多状态模式（0-9）"><a href="#2、多状态模式（0-9）" class="headerlink" title="2、多状态模式（0~9）"></a>2、多状态模式（0~9）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00 待处理</span><br><span class="line">10 处理中</span><br><span class="line">50 已取消（自动） 51 用户取消 52 商家取消</span><br><span class="line">60 已关闭</span><br><span class="line">90 已完成（自动） 91 用户完成</span><br><span class="line">其他为中间状态</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo文件存储OSS样式</title>
    <link href="https://github.com/weiecho/2020/07/18/doc_1121/"/>
    <id>https://github.com/weiecho/2020/07/18/doc_1121/</id>
    <published>2020-07-18T08:54:13.000Z</published>
    <updated>2020-07-24T05:56:34.587Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><blockquote><p>默认使用：域名/sample.jpg?x-oss-process=style/stylename</p></blockquote><h5 id="1、正方形图"><a href="#1、正方形图" class="headerlink" title="1、正方形图"></a>1、正方形图</h5><p><code>square-mini</code>  强制 高 120 宽 120</p><p>代码: <em>image/auto-orient,1/resize,m_fixed,w_120,h_120/quality,q_90</em></p><p><code>square-small</code>  强制 高 360 宽 360</p><p>代码: <em>image/auto-orient,1/resize,m_fixed,w_360,h_360/quality,q_90</em></p><p><code>square-medium</code>  强制 高 750 宽 750</p><p>代码: <em>image/auto-orient,1/resize,m_fixed,w_750,h_750/quality,q_90</em></p><h5 id="2、长方形图"><a href="#2、长方形图" class="headerlink" title="2、长方形图"></a>2、长方形图</h5><p><code>rectangle-mini</code>  强制 宽 120 高自适应</p><p>代码: <em>image/auto-orient,1/resize,m_lfit,w_120/quality,q_90</em></p><p><code>rectangle-small</code>  强制 宽 360 高自适应</p><p>代码: <em>image/auto-orient,1/resize,m_lfit,w_360/quality,q_90</em></p><p><code>rectangle-medium</code>  强制 宽 750 高自适应</p><p>代码: <em>image/auto-orient,1/resize,m_lfit,w_750/quality,q_90</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo编号规则说明</title>
    <link href="https://github.com/weiecho/2020/07/16/doc_1120/"/>
    <id>https://github.com/weiecho/2020/07/16/doc_1120/</id>
    <published>2020-07-16T12:24:23.000Z</published>
    <updated>2020-07-15T05:59:21.511Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><h5 id="1、用户ID规则：n位-预期号池量90亿"><a href="#1、用户ID规则：n位-预期号池量90亿" class="headerlink" title="1、用户ID规则：n位/预期号池量90亿+"></a>1、用户ID规则：n位/预期号池量90亿+</h5><p><code>n序号+2随机</code></p><p>n序列号：1000000001～9999999999<br>2随机：00～99</p><h5 id="2、用户账号规则：8-9位-预期号池量80亿-去靓号4位同号-4位连号"><a href="#2、用户账号规则：8-9位-预期号池量80亿-去靓号4位同号-4位连号" class="headerlink" title="2、用户账号规则：8-9位/预期号池量80亿/去靓号4位同号-4位连号"></a>2、用户账号规则：8-9位/预期号池量80亿/去靓号4位同号-4位连号</h5><p><code>8~10伪随机</code></p><p>8~10伪随机：100000000～9999999999</p><h5 id="3、用户靓号规则：6-8位-预期号池量5000w-6位号-4位同号-4位连号"><a href="#3、用户靓号规则：6-8位-预期号池量5000w-6位号-4位同号-4位连号" class="headerlink" title="3、用户靓号规则：6-8位/预期号池量5000w/6位号-4位同号-4位连号"></a>3、用户靓号规则：6-8位/预期号池量5000w/6位号-4位同号-4位连号</h5><p><code>6-8指定号</code></p><p>6-8指定号：100000～99999999</p><h5 id="4、订单号规则：15位-预期号池量100亿-可按年重置"><a href="#4、订单号规则：15位-预期号池量100亿-可按年重置" class="headerlink" title="4、订单号规则：15位/预期号池量100亿/可按年重置"></a>4、订单号规则：15位/预期号池量100亿/可按年重置</h5><p><code>1年份+2业务类型+10序号+2随机</code></p><p>1年份：n % 10 + 1 (2020年元年)<br>2类型：A类单 11 B类单 12<br>10序列号：0000000001～9999999999<br>2随机：00～99</p><h5 id="5、交易单号规则：16位-预期号池量10000亿-可按年重置"><a href="#5、交易单号规则：16位-预期号池量10000亿-可按年重置" class="headerlink" title="5、交易单号规则：16位/预期号池量10000亿/可按年重置"></a>5、交易单号规则：16位/预期号池量10000亿/可按年重置</h5><p><code>1年份+2业务类型+12序号+1随机</code></p><p>1年份：n % 10 + 1 (2020年元年)<br>2类型：充值 01 支付 02 退款 05 提现 09<br>12序列号：000000000001～999999999999<br>1随机：0～9</p><h5 id="6、SerialID规则：BIGINT-Serial控制-业务ID"><a href="#6、SerialID规则：BIGINT-Serial控制-业务ID" class="headerlink" title="6、SerialID规则：BIGINT/Serial控制/业务ID"></a>6、SerialID规则：BIGINT/Serial控制/业务ID</h5><p><code>1～&gt;无限量</code></p><h5 id="7、自增ID规则：BIGINT-设置自增"><a href="#7、自增ID规则：BIGINT-设置自增" class="headerlink" title="7、自增ID规则：BIGINT/设置自增"></a>7、自增ID规则：BIGINT/设置自增</h5><p><code>1～&gt;无限量</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo核心功能说明</title>
    <link href="https://github.com/weiecho/2020/07/15/doc_1119/"/>
    <id>https://github.com/weiecho/2020/07/15/doc_1119/</id>
    <published>2020-07-15T03:31:47.000Z</published>
    <updated>2020-07-15T03:30:55.940Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、服务采用rest + json返回数据，正常数据直接返回数据对象，提示码/异常统一封装ResultError返回，正常状况下controller只需返回正常数据对象就可以，service业务异常抛出由框架DefaultGlobalExceptionHandler统一处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">带结果返回实例</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/menus"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title">getMenus</span><span class="params">(Long projectId)</span> </span>&#123;</span><br><span class="line">   List&lt;Menu&gt; list = menuService.getMenus(projectId);</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">无结果返回实例：</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/code"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mobileCode</span><span class="params">(AuthType authType, String mobile)</span> </span>&#123;</span><br><span class="line">   mobileCodeService.sendMobileCode(authType, mobile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">业务代码实例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMobileCode</span><span class="params">(<span class="keyword">final</span> AuthType authType, <span class="keyword">final</span> Long userId)</span> </span>&#123;</span><br><span class="line">   String mobile = userAuthService.getMobileByUserId(userId);</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isEmpty(mobile)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BizServiceException(F11615);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.sendMobileCode(authType, mobile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">异常码返回Json（http状态码大于<span class="number">300</span>）：</span><br><span class="line">&#123;</span><br><span class="line">   code: <span class="number">11615</span>,</span><br><span class="line">   msg: <span class="string">"未绑定手机号码"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、服务功能配置采用预配置方式，需继承基础功能包内的配置类并注解@Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> <span class="keyword">extends</span> <span class="title">MybatisConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、服务引入auth-rpc进行权限校验，在WebMvcConfig配置相应的权限拦截器即可实现，需要控制权限的接口仅需加上注解@RequestPermissions({xxx})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">配置权限拦截：</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PermissionInterceptor <span class="title">permissionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PermissionInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**加入拦截器 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(permissionInterceptor())</span><br><span class="line">                 .addPathPatterns(<span class="string">"/portal/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">接口权限配置</span><br><span class="line"><span class="meta">@RequestPermissions</span>(&#123;<span class="string">"user_freeze"</span>&#125;)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/portal/user/freeze"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">freeze</span><span class="params">(Long userId, FreezeTime freezeTime, String reason)</span> </span>&#123;</span><br><span class="line">   userFreezeService.freeze(userId, freezeTime, reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、rabbit消息队列在实际开发中，绝大部分情况下仅需使用topic模式和延时模式，框架封装并简化了rabbit的topic模式和延时模式功能，生产和消费时的方法采用相同的方法，降低多种方法的配置和学习成本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">消费端声明消息队列</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> <span class="keyword">extends</span> <span class="title">RabbitConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;QueueBinding&gt; <span class="title">getQueueBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;QueueBinding&gt; queueBindings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        queueBindings.add(<span class="keyword">new</span> QueueBinding(USER_UNFREEZE, <span class="string">"user.topic"</span>, <span class="string">"user.unfreeze"</span>));</span><br><span class="line">        <span class="keyword">return</span> queueBindings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">消费端消费队列消息</span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = &#123;USER_UNFREEZE&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unfreezeUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    userAuthService.unfreeze(userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">生产端生产队列消息</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unfreezeUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    rabbitTopicSender.send(USER_UNFREEZE, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:</p><ol><li>RoutingKey命名规则：生产服务名称.业务功能<br>如：USER_UNFREEZE = “user.unfreeze”;</li><li>Queue命名规则：消费服务名称_RoutingKey<br>如：USER_UNFREEZE = “auth_user.unfreeze”;</li></ol></blockquote><p>5、分布式锁采用redis特性作为锁凭证中心，封装了@DistributionLock和@LockKey降低对系统业务的侵入性，同时利用LockKey参数细分控制每个锁元素，增大服务的吞吐量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">帐户入账时锁定对应帐户类型+用户ID</span><br><span class="line"><span class="meta">@DistributionLock</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(@LockKey AccountType accountType, @LockKey Long userId, AccountTradePo accountTrade)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、利用@cache进行数据缓存，可选择使用本地caffeine缓存器和远程redis缓存器，根据业务灵活使用缓存可以保障业务对高效稳定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"userCaches"</span>, key=<span class="string">"'user_' + #userId"</span>, cacheManager=<span class="string">"caffeineCacheManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserPo <span class="title">getUserInfoById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userPo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"userCaches"</span>, key=<span class="string">"'user_' + #userId"</span>, cacheManager=<span class="string">"redisCacheManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserPo <span class="title">getUserInfoById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userPo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、定时任务采用xxl-job分布式调度中心，利用统一调度策略（单点执行/分片执行），完成定时业务需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XxlJob</span>(<span class="string">"pendUnFreezeUserHandler"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">pendUnFreezeUserHandler</span><span class="params">(String param)</span> <span class="keyword">throws</span> Exception  </span>&#123;</span><br><span class="line">    XxlJobLogger.log(<span class="string">"job exec unfreeze user."</span>);</span><br><span class="line">    <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、项目pom引入auth-rpc后，在WebMvcConfig使用拦截器设置需要的权限规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionInterceptor <span class="title">permissionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PermissionInterceptor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**加入拦截器 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    registry.addInterceptor(permissionInterceptor()).addPathPatterns(<span class="string">"/portal/**"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、接口请求时经过授权检查会解析x-auth-token，在请求的header参数增加用户ID参数x-user-id，业务参数使用时可以直接获取改值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/api/withdraw/apply"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyWithdraw</span><span class="params">(@RequestHeader(value = AUTH_USER_ID)</span> Long userId,</span></span><br><span class="line"><span class="function">       Long bankCardId, BigDecimal coins) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、接口请求数据均需要携带header参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AUTH_SCOPE = <span class="string">"x-auth-scope"</span>;  <span class="comment">//授权作用域</span></span><br><span class="line">AUTH_TOKEN = <span class="string">"x-auth-token"</span>;  <span class="comment">//访问授权码</span></span><br><span class="line">CLIENT_NAME = <span class="string">"x-client-name"</span>;  <span class="comment">//客户端名称</span></span><br><span class="line">CLIENT_IMEI = <span class="string">"x-client-imei"</span>;  <span class="comment">//客户端设备号</span></span><br><span class="line">CLIENT_TYPE = <span class="string">"x-client-type"</span>;  <span class="comment">//客户端类型</span></span><br><span class="line">CLIENT_VERSION = <span class="string">"x-client-version"</span>;  <span class="comment">//客户端版本</span></span><br><span class="line">APP_VERSION = <span class="string">"x-app-version"</span>;  <span class="comment">//客户端应用版本</span></span><br><span class="line">APP_CHANNEL = <span class="string">"x-app-channel"</span>;  <span class="comment">//客户端应用渠道</span></span><br><span class="line">BUNDLE_ID = <span class="string">"x-bundle-id"</span>;  <span class="comment">//app包名(IOS: bundle id, 安卓: package name)</span></span><br><span class="line">TIMESTAMP = <span class="string">"x-timestamp"</span>;  <span class="comment">//时间戳</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目本地仓库引用强制刷新</title>
    <link href="https://github.com/weiecho/2020/07/13/exp_1116/"/>
    <id>https://github.com/weiecho/2020/07/13/exp_1116/</id>
    <published>2020-07-13T08:39:26.000Z</published>
    <updated>2020-07-14T01:41:25.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很多时候我们会遇到realse版本的包发布到maven仓库使用后，出现了一点问题需要修复，但是又想让大家静默升级<br>或者遇到一些包之间到引用混乱，需要重拉整理仓库引用<br>我们可以使用mvn dependency:purge-local-repository命令来进行全局刷新<br>但很多时候我们需要的只是个别包的强刷，下面简单说明下个别包的强刷</p></blockquote><h5 id="1）点击右侧Maven-Projects的-M图标-Execute-Maven-Goal-，填入命令点击执行即可强制刷新引用"><a href="#1）点击右侧Maven-Projects的-M图标-Execute-Maven-Goal-，填入命令点击执行即可强制刷新引用" class="headerlink" title="1）点击右侧Maven Projects的 M图标(Execute Maven Goal)，填入命令点击执行即可强制刷新引用"></a>1）点击右侧Maven Projects的 M图标(Execute Maven Goal)，填入命令点击执行即可强制刷新引用</h5><p>命令：dependency:purge-local-repository -Dinclude=”com.ctrip.framework.apollo:apollo-client” -U idea:idea</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1293812302.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233827383.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="2）检查项目引用apollo-client是否更新为版本-1-4-1"><a href="#2）检查项目引用apollo-client是否更新为版本-1-4-1" class="headerlink" title="2）检查项目引用apollo-client是否更新为版本 1.4.1"></a>2）检查项目引用apollo-client是否更新为版本 1.4.1</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233473782.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="3）如果不是全局查找一下是否有项目强制设置版本为1-4-0，如果存在设置去除版本号，再刷新检查引用"><a href="#3）如果不是全局查找一下是否有项目强制设置版本为1-4-0，如果存在设置去除版本号，再刷新检查引用" class="headerlink" title="3）如果不是全局查找一下是否有项目强制设置版本为1.4.0，如果存在设置去除版本号，再刷新检查引用"></a>3）如果不是全局查找一下是否有项目强制设置版本为1.4.0，如果存在设置去除版本号，再刷新检查引用</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233473782.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;很多时候我们会遇到realse版本的包发布到maven仓库使用后，出现了一点问题需要修复，但是又想让大家静默升级&lt;br&gt;或者遇到一些包之间到引用混乱，需要重拉整理仓库引用&lt;br&gt;我们可以使用mvn dependency:purge-local-re
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="idea" scheme="https://github.com/weiecho/tags/idea/"/>
    
      <category term="maven" scheme="https://github.com/weiecho/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目数据库约定</title>
    <link href="https://github.com/weiecho/2020/07/11/doc_1118/"/>
    <id>https://github.com/weiecho/2020/07/11/doc_1118/</id>
    <published>2020-07-11T12:13:06.000Z</published>
    <updated>2020-07-10T02:41:36.301Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、数据库全部使用小写字母，下划线分割，包括库名，表名，字段名，索引名</p><p>2、不能使用数据库保留字,比如：key，desc，delete，order等</p><p>3、索引列不能存储null，可以为空串””</p><p>4、使用innodb存储引擎，使用utf8mb4</p><p>5、每张表都要有一个整型类型自增长主键id，不允许使用联合主键</p><p>6、轻约束设计，不建议表之间设计外键，以提升性能和避免设计的复杂性</p><p>7、冗余设计（反范式化），避免后续大表关联查询，可考虑冗余部分字段</p><p>8、普通索引命名idx_(前缀) + 列名，唯一索引命名udx_(前缀) + 列名</p><p>9、避免在索引列进行函数运算、!=/&lt;&gt;、not in等的使用（索引不能被使用）</p><p>10、varchar(M) M代表的意思是存储的最大字符数，不是字节数。M的值如果没有特别需要，建议不超过255（超过后存储方式会变化）</p><p>11、不要使用blob，text，longblob,longtext等超长的数据类型。对于要存储log日志的需求，建议程序端使用外部文件存储的方式</p><p>12、线上库truncate table xx、drop table xx操作需要邮件提前通知各部门，以防误删</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目代码规范</title>
    <link href="https://github.com/weiecho/2020/07/11/doc_1117/"/>
    <id>https://github.com/weiecho/2020/07/11/doc_1117/</id>
    <published>2020-07-11T08:23:46.000Z</published>
    <updated>2020-07-10T02:38:19.860Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、if else语句不超过三层，代码嵌套层次达3层以上时，一般人理解起来都会困难，尽量避免用到else，可以使用if(xx) return替代。</p><p>2、每个if while for等语句，都不要省略大括号{}。</p><p>3、公用逻辑抽取成公用方法，并加以注释说明。</p><p>4、在实体字段、类、方法使用Java Doc注释方式 /** **/，方法注释时除非特殊说明不强制要求对方法每个参数进行注释，注释宜少而精，不宜多而滥，更不能误导。</p><p>5、在代码中加入 //TODO: ，IDE会提示让你知道你还有什么事没有做，如已经处理过的重写方法需要将自动生成的TODO注释删除。</p><p>6、如果某个方法是故意留空不写，需要注释说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!exists(order)) &#123;</span><br><span class="line">    <span class="comment">//nothing to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、变量的声明，初始化和被使用尽量放到一起。</p><p>8、能用局部变量的，不要使用实例变量，能用实例变量的，不要使用类变量。变量的生存期越短，以为着它被误用的机会越小，同一时刻要关注的变量的状态越少。</p><p>9、尽量不要用参数来带回方法运算结果，而是使用return返回。</p><p>10、尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销。</p><p>11、字符串变量和字符串常量equals的时候将字符串常量写在前面 “abc”.equals(obj)，这么做可以避免空指针异常。</p><p>12、把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢。</p><p>13、尽量不捕获Java类库中定义的继承自RuntimeException的运行时异常类，而是使用全局处理方法统一记录日志并处理。</p><p>14、打印日志时候，使用log而不是System.out.println()，注意日志级别 info/warn/error。</p><p>15、不要想着等完成了功能，再来优化代码的格式和结构，等真的把功能完成，很少有人会再愿意回头调整代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目命名规范</title>
    <link href="https://github.com/weiecho/2020/07/10/doc_1116/"/>
    <id>https://github.com/weiecho/2020/07/10/doc_1116/</id>
    <published>2020-07-10T00:30:46.000Z</published>
    <updated>2020-07-10T02:32:14.386Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、统一：对于同一个概念，在程序中用同一种表示方法，比如对于供应商，既可以用supplier，也可以用provider，但是我们只能选定一个使用。</p><p>2、达意：标识符能准确的表达出它所代表的意义，比如： newSupplier, OrderPaymentService等；而 supplier1, service2，idtts等则不是好的命名方式。</p><p>3、简洁：在统一和达意的前提下，用尽量少的标识符。如果不能达意，宁愿不要简洁。</p><p>4、驼峰法则：Java中除了包名，静态常量等特殊情况，大部分情况下标识符使用驼峰法则，即单词之间不使用特殊符号分割，而是通过首字母大写来分割。比如: supplierName, addNewContract，而不是 supplier_name, add_new_contract。</p><p>5、英文 vs 拼音：尽量使用通俗易懂的英文单词，如果不会可以向队友求助，避免拼音与英文混用。</p><p>6、包名 &amp; 类名：包名使用小写字母，如 com.xxx.service，类名要首字母大写，比如 SupplierService。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo模块划分原则</title>
    <link href="https://github.com/weiecho/2020/07/09/doc_1115/"/>
    <id>https://github.com/weiecho/2020/07/09/doc_1115/</id>
    <published>2020-07-09T02:55:12.000Z</published>
    <updated>2020-07-09T02:54:35.902Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、项目业务模块划分原则：高内聚、低耦合、可复用、可扩展、可维护。</p><p>2、根据具体的业务子类型、操作类型等再分为子业务模块，参考业务部门、业务类型、服务对象等依据分为各大业务模块。</p><p>3、新增需求若与原业务模块关联不大，或较少调用关系，则可定义为新的子业务模块。</p><p>4、让程序模块单元的职责单一，可以使你在编写这段程序时关注更少的东西，从而降低难度，减少出错。</p><p>5、先业务后技术，先逻辑后物理，服务的稳定性优先，通过拆分解耦</p><p>6、尽量避免事务，适当采用异步解耦，适当使用缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo微服务架构说明</title>
    <link href="https://github.com/weiecho/2020/07/07/doc_1114/"/>
    <id>https://github.com/weiecho/2020/07/07/doc_1114/</id>
    <published>2020-07-07T03:16:35.000Z</published>
    <updated>2020-07-09T02:53:24.144Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>weiecho微服务架构是基于springcloud + consul的微服务框架设计体系，以人员、时效、成本、品质为基础设计思路，极度适用于小中型开发设计团队，可通过简单调整扩展支持中大型开发设计团队。框架设计过程中整合实际项目经验，利用接口化、消息队列、模块化、服务化、异步化等技术方案保障服务稳定性和可扩展性。</p><p>根据互联网产品多年经验分析，我们的产品无论从任何角度为切入点，最终都希望完成用户支付-服务的闭环思维，在weiecho的架构体系设计时期直接将用户、帐户、商品、订单、交易、消息作为功能架构的基础模块体系，从而结合实际项目体系完成整体微服务体系搭建，以协助团队快速集成完善的开发结构体系。</p><p>依托功能预代入模式的完善架构体系思想，后续功能开发仅需对相应业务逻辑进行部分调整、增加对应的服务模块（如IM、聊天室等），利用类似二次开发方式极大降低开发团队的技术壁垒，降低微服务开发及治理难度，结合代码快速生成器可以在10分钟内完成简单功能开发，非常快发迭代开发的技术团队，尤其适用于50人以下的技术开发团队。</p><h2 id="规划架构说明"><a href="#规划架构说明" class="headerlink" title="规划架构说明"></a>规划架构说明</h2><p>weiecho架构考虑多设备、多应用场景，从应用入口区分了各类应用入口的控制和管理，在功能方面分为应用入口、服务网关、核心服务、公共模块、风控模块、运营管理后台、数据支持等模块。</p><h4 id="应用入口"><a href="#应用入口" class="headerlink" title="应用入口"></a>应用入口</h4><p>应用入口可以接受APP、WEB、小程序、A应用、B应用、外部应用等应用接入，利用服务的项目管理功能可以实现无限扩展的应用接入方式，从而达到类中台的服务架构体系。</p><h4 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h4><p>服务网关主要考虑安全、流控、风控等风险因素，接入参数验证、身份验证、路由策略、流控策略、风控验证等安全模块，保障整体服务安全稳定运行。</p><h4 id="核心服务"><a href="#核心服务" class="headerlink" title="核心服务"></a>核心服务</h4><p>核心服务为项目主要业务服务，目前规划分为聚合服务、用户服务、帐户服务、商品服务、订单服务、交易服务、对账服务、清算服务、消息服务、授权服务、营销服务、售后服务等。市场运营需求可以增加推广服务、广告服务，即时沟通类需求可以扩展IM服务，直播类需求可以扩展直播服务，打赏服务等。</p><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>公共模块作为业务的支持服务，主要包含授权服务、报警服务、消息服务、单号生成器、注册中心、配置中心、定时任务、分布式锁、分库分表模块，服务成熟后可逐步考虑接入生物识别、内容识别、数据服务等模块。</p><h4 id="风控模块"><a href="#风控模块" class="headerlink" title="风控模块"></a>风控模块</h4><p>风控模块为服务安全等核心领域，包含安全认证、资质审查、用户分级、黑白名单、风险预警、风险处置、支付风险、信用风险、征信相关等，可以根据需要完善该模块内容保障整体服务等安全性。</p><h4 id="运营管理后台"><a href="#运营管理后台" class="headerlink" title="运营管理后台"></a>运营管理后台</h4><p>运营管理后台为管理整个服务的入口，通过精确的权限管控分配用户是使用功能，对系统用户、帐户、订单、交易、对账、投诉等信息的查看和维护操作。</p><h4 id="数据支持"><a href="#数据支持" class="headerlink" title="数据支持"></a>数据支持</h4><p>数据支持分为内部数据支持和三方支持，其中内部数据支持包含mysql、redis、rabbit mq、promethes、elk、innerdb等，三方支持包含短信服务、消息服务、OSS文件存储、支付通道、实名认证、生物检测等功能。</p><h2 id="部署架构说明"><a href="#部署架构说明" class="headerlink" title="部署架构说明"></a>部署架构说明</h2><p>用户访问APP、WEB、H5页面通过LBS算法调用到最佳的nginx服务器，nginx通过规则转发调用到指定的服务或服务网关，gatway经过鉴权、风控等安全校验后通过consul注册中心LB路由到指定的业务服务，业务服务根据需要调用对应的数据支持端、RPC服务短信或第三方服务端，完成业务功能后返回对应的数据。</p><p>整个部署架构分为入口访问组、核心服务组、基础支撑组和服务监控组。</p><p>1、LBS域名指向服务域名，开通https、防ddocs等安全性功能。</p><p>2、入口访问组包含nginx、potal web、activity web、gateway服务，nginx需要开通外网流量权限，gateway需打通与核心业务组网段调用，potal web和activity web为前端网页服务，可视情况与nginx服务同机器部署或单独部署。</p><p>3、核心服务组根据各服务压测和预估QPS状况，部署相应量级的服务节点，为保障服务高可用，每个服务至少部署两个节点。</p><p>4、基础支撑组需开放核心业务组网络相互访问，部署consul注册中心集群，consul集群请独立部署并至少部署3个server节点和2+个client节点，DB至少保证主从节点配置，rabbitmq集群使用镜像模式保障服务的高可用，redis根据服务需要主从、集群部署，其他支持服务根据需要部署相应套件。</p><p>服务监控组需开放核心业务组网络相互访问，zabbix、prometheus、zipkin server根据服务需要部署相应节点套件，ELK部署至少3个master节点和3个data节点，数据节点建议内存30G，master节点建议10G，聚合节点等根据需要配置，日志类索引根据需要设置n*3个Primaries（如无特殊需要Replicas设置为0），日志索引名称按天存储。日志收集采用filebeat -&gt; kafka -&gt; logstash -&gt; elasticsearch套件，logstash路由pipeline简化配置和服务管理。</p><h2 id="控制中心模块"><a href="#控制中心模块" class="headerlink" title="控制中心模块"></a>控制中心模块</h2><h4 id="服务网关-gateway"><a href="#服务网关-gateway" class="headerlink" title="服务网关 gateway"></a>服务网关 gateway</h4><p>服务网关基于springcloud原生gateway实现，为整个微服务架构提供简单、有效和统一的API路由管理方式，结合服务的授权体系、风控体系、sentinel流控体系、swagger接口文档等方便统一的管理微服务体系，同时保障服务的安全稳定运行。</p><h4 id="流控后台-sentinel-dashboard"><a href="#流控后台-sentinel-dashboard" class="headerlink" title="流控后台 sentinel-dashboard"></a>流控后台 sentinel-dashboard</h4><p>sentinel流控后台是面向微服务的轻量级流量控制框架，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><h4 id="任务调度-xxl-job-admin"><a href="#任务调度-xxl-job-admin" class="headerlink" title="任务调度 xxl-job-admin"></a>任务调度 xxl-job-admin</h4><p>xxl-job任务调度中心是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</p><h4 id="链路追踪-zipkin"><a href="#链路追踪-zipkin" class="headerlink" title="链路追踪 zipkin"></a>链路追踪 zipkin</h4><p>zipkin链路追踪基于 Google Dapper 实现，用来收集各个服务器上请求链路的跟踪数据，并通过提供的 REST API 接口来辅助查询跟踪数据以实现对分布式系统的监控程序，从而及时发现系统中的存在的风险性问题。</p><h2 id="公共组建模块"><a href="#公共组建模块" class="headerlink" title="公共组建模块"></a>公共组建模块</h2><h4 id="公共配置-configurator"><a href="#公共配置-configurator" class="headerlink" title="公共配置 configurator"></a>公共配置 configurator</h4><p>公共配置模块整理和优化了服务的常用配置，采用配置但不启用的方式进行标准化处理，服务仅需继承相应类并加上注解@Configuration就可以启用功能。</p><h4 id="公共资源-framework"><a href="#公共资源-framework" class="headerlink" title="公共资源 framework"></a>公共资源 framework</h4><p>公共资源模块聚合类一些常用但公共处理类，增强服务语法的统一性和功能的准确性，减少大量重复造轮子的现象。</p><h4 id="序列号组件-serialno"><a href="#序列号组件-serialno" class="headerlink" title="序列号组件 serialno"></a>序列号组件 serialno</h4><p>序列号生成组件能够自动产生指定功能的递增序列号，采用服务独立自主管理序列号的方式，降低使用独立序列号服务的耦合性，采用redis作为预生成序列号池缓存区，加速服务的ID获取的处理速度。</p><h4 id="消息组件封装-rabbit-mq"><a href="#消息组件封装-rabbit-mq" class="headerlink" title="消息组件封装 rabbit-mq"></a>消息组件封装 rabbit-mq</h4><p>消息组件封装默认封装的是rabbit的topic模式，结合延迟插件默认生成普通topic交换机和延迟队列交换机，在生产端调用发送消息是是否为延迟消息，消费配置queue时选择是否为延迟队列。一般情况下topic模式+延迟队列能够完全满足服务的各种消息需求。</p><h4 id="分布式锁组件-distribution-lock"><a href="#分布式锁组件-distribution-lock" class="headerlink" title="分布式锁组件 distribution-lock"></a>分布式锁组件 distribution-lock</h4><p>分布式锁组件提供了分布式服务锁的功能，采用redis作为锁的计算核心，可以直接在方法上注解声明锁，同时采用注解方法参数作为降低锁粒度，从而更加灵活完善的支撑业务功能。</p><h4 id="分库分表组件-sharding-db"><a href="#分库分表组件-sharding-db" class="headerlink" title="分库分表组件 sharding-db"></a>分库分表组件 sharding-db</h4><p>分库分表组件封装了sharding-jdbc作为功能内核，调整优化了配置方式和支持类型，可在大量不改变配置文件的状况扩展出单库数据源、主从数据源、分库数据源三种配置模式，极大的方便服务升级改造。</p><h4 id="流控降级组件-sentinel-client"><a href="#流控降级组件-sentinel-client" class="headerlink" title="流控降级组件 sentinel-client"></a>流控降级组件 sentinel-client</h4><p>流控降级组件封装了sentinel作为功能内核，调整优化了分布式配置存取、实时监控数据持久存储和流控熔断异常处理逻辑，可以实时查看服务状况、动态调整服务的熔断或流控阈值，结合流控熔断监控报警实时保障服务的安全稳定。</p><h2 id="标准服务结构"><a href="#标准服务结构" class="headerlink" title="标准服务结构"></a>标准服务结构</h2><p>weiecho标准服务包含xxx-app（服务启动入口）、xxx-core（业务功能核心）、xxx-enum（服务全局枚举）、xxx-job（定时任务包）、xxx-rpc（rpc服务接口SDK）模块，考虑初期业务量、维护人员、服务维护难度及大部分微服务功能等状况，标准服务结构采用单服务聚合部署方式，降低开发维护难度，加速服务业务功能迭代开发上线。</p><p>本框架为保障服务接口的安全及一致性，利用强约束的方式保障所有问题暴露在上线部署前，约定服务提供方编写远程调用接口SDK提供给调用方。</p><h3 id="模块继承规则："><a href="#模块继承规则：" class="headerlink" title="模块继承规则："></a>模块继承规则：</h3><blockquote><p>1、xxx-app可引入xxx-core、xxx-job、xxx-rpc模块；</p><p>2、xxx-core可引入xxx-enum模块，支撑业务核心功能模块，可服务业务量状况拆分出event（MQ事件）模块走独立服务入口；</p><p>3、xxx-job根据需要使用xxx-app服务入口或独立服务走任务服务入口；</p><p>4、xxx-rpc可引入xxx-enum模块，也可以根据需要使用xxx-app服务入口或独立服务走任务服务入口。</p></blockquote><h4 id="服务启动入口-xxx-app"><a href="#服务启动入口-xxx-app" class="headerlink" title="服务启动入口 xxx-app"></a>服务启动入口 xxx-app</h4><p>xxxApplication.java为服务启动入口类，主要包含springboot服务启动main方法和部分启动注解；</p><p>cn.echo.xxx.config为服务配置包，主要包含服务初始化各项配置类，如：database、redis、cache、mq、mvc、job等配置；</p><p>cn.echo.xxx.controller为接口控制包，包含api（业务接口）、portal（后台接口）、rpc（rpc接口）控制实现类，其中rpc为继承xxx-rpc模块等实现类；</p><p>cn.echo.xxx.execption为服务异常处理包，默认包含GlobalExceptionHandler继承实现全局异常处理类cn.echo.framework.response.DefaultGlobalExceptionHandler。</p><h4 id="业务功能核心-xxx-core"><a href="#业务功能核心-xxx-core" class="headerlink" title="业务功能核心 xxx-core"></a>业务功能核心 xxx-core</h4><p>cn.echo.xxx.core.dao为数据处理包，主要包含mybatis调用数据源接口类；</p><p>cn.echo.xxx.core.entity为数据实体包，主要包含数据库表对应字段实体类；</p><p>cn.echo.xxx.core.pojo为业务实体包，主要为业务上下文封装需要的相关实体类；</p><p>cn.echo.xxx.core.event为MQ事件包，主要包含constant（常量）、receiver（接收处理）、sender（发送处理），其中constant主要包含queue、routing key常量定义；</p><p>cn.echo.xxx.core.service为业务逻辑接口包，主要定义业务逻辑功能接口，impl为逻辑接口的实现类。</p><h4 id="服务全局枚举-xxx-enum"><a href="#服务全局枚举-xxx-enum" class="headerlink" title="服务全局枚举 xxx-enum"></a>服务全局枚举 xxx-enum</h4><p>cn.echo.xxx.em.enums为全局枚举包，主要配合业务需要定义各类枚举；</p><p>cn.echo.xxx.em.response为全局服务响应码包，主要特殊业务状况下返回的信息提示码（警告、异常等），此异常码在服务创建时统一分配前缀，各服务维护自己的异常码，异常码类继承自框架类cn.echo.framework.response.ResultCode。</p><h4 id="定时任务包-xxx-job"><a href="#定时任务包-xxx-job" class="headerlink" title="定时任务包 xxx-job"></a>定时任务包 xxx-job</h4><p>cn.echo.xxx.job为定时任务实现包，利用xxljob实现任务调度工作，根据最新2.2.0版本实现，在方法体注解@XxlJob(“xxxHandler”)并按照官方语法即可完成任务开发，结合后台配置规则实现动态任务调度管理。</p><h4 id="远程调用接口SDK-xxx-rpc"><a href="#远程调用接口SDK-xxx-rpc" class="headerlink" title="远程调用接口SDK xxx-rpc"></a>远程调用接口SDK xxx-rpc</h4><p>cn.echo.xxx.rpc.client远程调用SDK接口包，用于定义FeignClient提供给调用方的接口；</p><p>cn.echo.xxx.rpc.dto远程调用SDK接口实体包，主要为SDK接口上下文封装需要的相关实体类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel流控降级原则</title>
    <link href="https://github.com/weiecho/2020/07/02/stu_1117/"/>
    <id>https://github.com/weiecho/2020/07/02/stu_1117/</id>
    <published>2020-07-02T06:06:55.000Z</published>
    <updated>2020-07-03T06:10:14.732Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><ul><li>Sentinel 是围绕着资源来工作的。</li><li>编码时，只需要关心如何定义资源，即哪些方法/代码块需要保护，而不需要关注如何保护这个资源。</li><li>通过添加规则来保护资源，规则添加即时生效。</li></ul><h3 id="规则配置原则"><a href="#规则配置原则" class="headerlink" title="规则配置原则"></a>规则配置原则</h3><ul><li>按照应用处理能力进行流控：<ul><li>按服务提供方流控原则</li><li>削峰填谷原则</li><li>冷启动原则</li><li>联动控制原则</li></ul></li><li>强依赖隔离原则</li><li>弱依赖降级原则</li><li>系统保护原则，详情请参见[系统保护篇]</li></ul><h3 id="弱依赖降级"><a href="#弱依赖降级" class="headerlink" title="弱依赖降级"></a>弱依赖降级</h3><p>当若依赖的第三方应用出错不会影响而整体流程，则称之为弱依赖。对于弱依赖不稳定时，需要配置降级原则来保护系统稳定性。</p><p>在实际业务中，应用通常会调用依赖方（远程服务、数据库、第三方 API 等）来完成服务。例如，支付的时需要远程调用银联提供的 API。然而依赖方的稳定性是不能保证的。若依赖方出现不稳定的情况，则请求和调用依赖方的方法的的响应时间变长，线程产生堆积，最终可能耗尽自身的线程数，导致应用本身不可用。</p><p>在复杂链路中，若某一环不稳定，就可能会层层渲染，最终导致整个链路都不可用。</p><p>针对以上情况，可以使用对依赖方配置降级原则来保证系统稳定性。</p><p>###强依赖隔离</p><p>若依赖的第三方应用或组件，或者应用自身的内部方法出错会影响而整体流程，则称之为强依赖。对于强依赖，需要配置隔离原则来保护系统稳定性。</p><p>当强依赖出现不稳定的时候，可以通过配置并发线程数隔离原则来限制不稳定的强依赖并发数，隔离强依赖。配置并发线程数隔离原则后，无需再进行线程池隔离，sentinel 会控制资源的线程数。当请求数超过阈值时，sentinel 将拒绝多余的请求，直到堆积的线程处理完成，以此来达到信号量隔离的效果。</p><p>线程数目超出时，设置 快速失败 能够有效地防止自己被慢调用所影响。</p><h3 id="系统防护"><a href="#系统防护" class="headerlink" title="系统防护"></a>系统防护</h3><p>系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>一般性系统自适应保护的思路是根据硬指标即系统的负载来做系统过载保护。即当系统负载高于某个阈值，就禁止或者减少流量的进入；若负载恢复，则恢复流量的进入。这样会造成两个不可避免的问题：</p><ul><li>若根据负载的情况来调节流量的通过率，则会产生延迟。若当前通过率的调整会导致负载增大，那么至少要过 1 秒之后才能被观测到；同理，若当前通过率调整会使负载降低，也需要 1 秒之后才能继续调整。这种方法会浪费系统的处理能力。导致我们看到的负载曲线产生锯齿。</li><li>通过率恢复慢。在下游应用不可靠，应用响应时间很长，从而导致负载很高的场景中，若下游应用恢复时，应用响应时间也会随之减短，此时通过率理应会大幅度增大。但由于此时负载仍然很高，所以通过率的恢复慢。</li></ul><p>为解决上述问题，sentinel在系统自适应保护的做法是：用每分钟的负载作为启动控制流量，使用请求的响应时间以及当前系统正在处理的请求速率来决定通过的流量。旨在在系统不被拖垮的情况下，提高系统的吞吐率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/weiecho/sentinel-client&quot;&gt;sentinel流控防护&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本原则&quot;&gt;&lt;a href=&quot;#基本原则&quot; class=&quot;headerlink&quot; title=&quot;基本
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel系统防护</title>
    <link href="https://github.com/weiecho/2020/06/20/stu_1116/"/>
    <id>https://github.com/weiecho/2020/06/20/stu_1116/</id>
    <published>2020-06-20T02:23:41.000Z</published>
    <updated>2020-07-03T06:06:06.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h3><p>长期以来，系统自适应保护的思路是根据硬指标即系统的负载来做系统过载保护。即当系统负载高于某个阈值，就禁止或者减少流量的进入；若负载恢复，则恢复流量的进入。这样会造成两个不可避免的问题：</p><ul><li>若根据负载的情况来调节流量的通过率，则会产生延迟。若当前通过率的调整会导致负载增大，那么至少要过 1 秒之后才能被观测到；同理，若当前通过率调整会使负载降低，也需要 1 秒之后才能继续调整。这种方法会浪费系统的处理能力。导致我们看到的负载曲线产生锯齿。</li><li>通过率恢复慢。在下游应用不可靠，应用响应时间很长，从而导致负载很高的场景中，若下游应用恢复时，应用响应时间也会随之减短，此时通过率理应会大幅度增大。但由于此时负载仍然很高，所以通过率的恢复慢。</li></ul><p>为解决上述问题，sentinel 应用流控降级在系统自适应保护的做法是：用每分钟的负载作为启动控制流量，使用请求的响应时间以及当前系统正在处理的请求速率来决定通过的流量。旨在在系统不被拖垮的情况下，提高系统的吞吐率。</p><h3 id="功能原理"><a href="#功能原理" class="headerlink" title="功能原理"></a>功能原理</h3><p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/stu/15671348491.png" alt="image" title="功能原理">                </div>                <div class="image-caption">功能原理</div>            </figure><p>若用 T 来表示水管内部的水量，用 RT 来表示请求的处理时间，用 P 来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 P * RT 个请求。即当 T ≈ QPS * Avg(RT) 的时候，可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会继续增加。当入口的流量是水管出来的流量的最大的值的时候，水管的处理能力达到最大利用。</p><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量生效。入口流量指的是进入应用的流量（EntryType.IN），例如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。系统规则支持四种阈值类型：</p><ul><li>Load（仅对 Linux/Unix-like 机器生效）：当系统 load1 超过阈值且系统当前的并发线程数超过系统容量时才会触发系统保护。</li><li>RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护。</li><li>线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>shardingsphere不支持LocalDateTime/LocalDate</title>
    <link href="https://github.com/weiecho/2020/06/17/exp_1117/"/>
    <id>https://github.com/weiecho/2020/06/17/exp_1117/</id>
    <published>2020-06-17T07:56:39.000Z</published>
    <updated>2020-07-13T08:40:31.743Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shardingsphere默认使用等jdk版本是1.7，所以并没有支持jdk1.8+的LocalDateTime等特性</span><br><span class="line"></span><br><span class="line">我已经在fork上扩展了这个特性，并将JDK的功能升级到jdk1.8。</span><br><span class="line"></span><br><span class="line">主要验证了支持 Mybatis5+</span><br><span class="line"></span><br><span class="line">4.0.0-RC2-1.8</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;lonyee1989&#x2F;incubator-shardingsphere&#x2F;tree&#x2F;4.0.0-RC2-1.8</span><br></pre></td></tr></table></figure><h3 id="直接上实现代码"><a href="#直接上实现代码" class="headerlink" title="直接上实现代码"></a>直接上实现代码</h3><p><a href="https://github.com/lonyee1989/incubator-shardingsphere/tree/4.0.0-RC2-1.8">fork代码</a></p><p>1、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert value via expected class type.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value original value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> convertType expected class type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> converted value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">convertValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertNullValue(convertType);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (value.getClass() == convertType) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalDateTimeValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalDate.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalDateValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalTime.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalTimeValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertNumberValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertDateValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertByteArrayValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (String.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalDateTimeValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalDateValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalTimeValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(mergeResultSet.getValue(columnIndex, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(mergeResultSet.getValue(columnLabel, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(resultSet.getValue(columnIndex, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(resultSet.getValue(columnLabel, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、package org.apache.shardingsphere.shardingjdbc.jdbc.unsupported;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="shardingsphere" scheme="https://github.com/weiecho/tags/shardingsphere/"/>
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="架构设计" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
