<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wei Echo</title>
  
  <subtitle>高效稳定 · 简洁易用 · 灵活扩展</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/weiecho/"/>
  <updated>2020-07-14T01:41:25.430Z</updated>
  <id>https://github.com/weiecho/</id>
  
  <author>
    <name>Wei Echo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven项目本地仓库引用强制刷新</title>
    <link href="https://github.com/weiecho/2020/07/13/exp_1116/"/>
    <id>https://github.com/weiecho/2020/07/13/exp_1116/</id>
    <published>2020-07-13T08:39:26.000Z</published>
    <updated>2020-07-14T01:41:25.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很多时候我们会遇到realse版本的包发布到maven仓库使用后，出现了一点问题需要修复，但是又想让大家静默升级<br>或者遇到一些包之间到引用混乱，需要重拉整理仓库引用<br>我们可以使用mvn dependency:purge-local-repository命令来进行全局刷新<br>但很多时候我们需要的只是个别包的强刷，下面简单说明下个别包的强刷</p></blockquote><h5 id="1）点击右侧Maven-Projects的-M图标-Execute-Maven-Goal-，填入命令点击执行即可强制刷新引用"><a href="#1）点击右侧Maven-Projects的-M图标-Execute-Maven-Goal-，填入命令点击执行即可强制刷新引用" class="headerlink" title="1）点击右侧Maven Projects的 M图标(Execute Maven Goal)，填入命令点击执行即可强制刷新引用"></a>1）点击右侧Maven Projects的 M图标(Execute Maven Goal)，填入命令点击执行即可强制刷新引用</h5><p>命令：dependency:purge-local-repository -Dinclude=”com.ctrip.framework.apollo:apollo-client” -U idea:idea</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1293812302.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233827383.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="2）检查项目引用apollo-client是否更新为版本-1-4-1"><a href="#2）检查项目引用apollo-client是否更新为版本-1-4-1" class="headerlink" title="2）检查项目引用apollo-client是否更新为版本 1.4.1"></a>2）检查项目引用apollo-client是否更新为版本 1.4.1</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233473782.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="3）如果不是全局查找一下是否有项目强制设置版本为1-4-0，如果存在设置去除版本号，再刷新检查引用"><a href="#3）如果不是全局查找一下是否有项目强制设置版本为1-4-0，如果存在设置去除版本号，再刷新检查引用" class="headerlink" title="3）如果不是全局查找一下是否有项目强制设置版本为1.4.0，如果存在设置去除版本号，再刷新检查引用"></a>3）如果不是全局查找一下是否有项目强制设置版本为1.4.0，如果存在设置去除版本号，再刷新检查引用</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1233473782.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;很多时候我们会遇到realse版本的包发布到maven仓库使用后，出现了一点问题需要修复，但是又想让大家静默升级&lt;br&gt;或者遇到一些包之间到引用混乱，需要重拉整理仓库引用&lt;br&gt;我们可以使用mvn dependency:purge-local-re
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="idea" scheme="https://github.com/weiecho/tags/idea/"/>
    
      <category term="maven" scheme="https://github.com/weiecho/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目数据库约定</title>
    <link href="https://github.com/weiecho/2020/07/11/doc_1118/"/>
    <id>https://github.com/weiecho/2020/07/11/doc_1118/</id>
    <published>2020-07-11T12:13:06.000Z</published>
    <updated>2020-07-10T02:41:36.301Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、数据库全部使用小写字母，下划线分割，包括库名，表名，字段名，索引名</p><p>2、不能使用数据库保留字,比如：key，desc，delete，order等</p><p>3、索引列不能存储null，可以为空串””</p><p>4、使用innodb存储引擎，使用utf8mb4</p><p>5、每张表都要有一个整型类型自增长主键id，不允许使用联合主键</p><p>6、轻约束设计，不建议表之间设计外键，以提升性能和避免设计的复杂性</p><p>7、冗余设计（反范式化），避免后续大表关联查询，可考虑冗余部分字段</p><p>8、普通索引命名idx_(前缀) + 列名，唯一索引命名udx_(前缀) + 列名</p><p>9、避免在索引列进行函数运算、!=/&lt;&gt;、not in等的使用（索引不能被使用）</p><p>10、varchar(M) M代表的意思是存储的最大字符数，不是字节数。M的值如果没有特别需要，建议不超过255（超过后存储方式会变化）</p><p>11、不要使用blob，text，longblob,longtext等超长的数据类型。对于要存储log日志的需求，建议程序端使用外部文件存储的方式</p><p>12、线上库truncate table xx、drop table xx操作需要邮件提前通知各部门，以防误删</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目代码规范</title>
    <link href="https://github.com/weiecho/2020/07/11/doc_1117/"/>
    <id>https://github.com/weiecho/2020/07/11/doc_1117/</id>
    <published>2020-07-11T08:23:46.000Z</published>
    <updated>2020-07-10T02:38:19.860Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、if else语句不超过三层，代码嵌套层次达3层以上时，一般人理解起来都会困难，尽量避免用到else，可以使用if(xx) return替代。</p><p>2、每个if while for等语句，都不要省略大括号{}。</p><p>3、公用逻辑抽取成公用方法，并加以注释说明。</p><p>4、在实体字段、类、方法使用Java Doc注释方式 /** **/，方法注释时除非特殊说明不强制要求对方法每个参数进行注释，注释宜少而精，不宜多而滥，更不能误导。</p><p>5、在代码中加入 //TODO: ，IDE会提示让你知道你还有什么事没有做，如已经处理过的重写方法需要将自动生成的TODO注释删除。</p><p>6、如果某个方法是故意留空不写，需要注释说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!exists(order)) &#123;</span><br><span class="line">    <span class="comment">//nothing to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、变量的声明，初始化和被使用尽量放到一起。</p><p>8、能用局部变量的，不要使用实例变量，能用实例变量的，不要使用类变量。变量的生存期越短，以为着它被误用的机会越小，同一时刻要关注的变量的状态越少。</p><p>9、尽量不要用参数来带回方法运算结果，而是使用return返回。</p><p>10、尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销。</p><p>11、字符串变量和字符串常量equals的时候将字符串常量写在前面 “abc”.equals(obj)，这么做可以避免空指针异常。</p><p>12、把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢。</p><p>13、尽量不捕获Java类库中定义的继承自RuntimeException的运行时异常类，而是使用全局处理方法统一记录日志并处理。</p><p>14、打印日志时候，使用log而不是System.out.println()，注意日志级别 info/warn/error。</p><p>15、不要想着等完成了功能，再来优化代码的格式和结构，等真的把功能完成，很少有人会再愿意回头调整代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo项目命名规范</title>
    <link href="https://github.com/weiecho/2020/07/10/doc_1116/"/>
    <id>https://github.com/weiecho/2020/07/10/doc_1116/</id>
    <published>2020-07-10T00:30:46.000Z</published>
    <updated>2020-07-10T02:32:14.386Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、统一：对于同一个概念，在程序中用同一种表示方法，比如对于供应商，既可以用supplier，也可以用provider，但是我们只能选定一个使用。</p><p>2、达意：标识符能准确的表达出它所代表的意义，比如： newSupplier, OrderPaymentService等；而 supplier1, service2，idtts等则不是好的命名方式。</p><p>3、简洁：在统一和达意的前提下，用尽量少的标识符。如果不能达意，宁愿不要简洁。</p><p>4、驼峰法则：Java中除了包名，静态常量等特殊情况，大部分情况下标识符使用驼峰法则，即单词之间不使用特殊符号分割，而是通过首字母大写来分割。比如: supplierName, addNewContract，而不是 supplier_name, add_new_contract。</p><p>5、英文 vs 拼音：尽量使用通俗易懂的英文单词，如果不会可以向队友求助，避免拼音与英文混用。</p><p>6、包名 &amp; 类名：包名使用小写字母，如 com.xxx.service，类名要首字母大写，比如 SupplierService。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo模块划分原则</title>
    <link href="https://github.com/weiecho/2020/07/09/doc_1115/"/>
    <id>https://github.com/weiecho/2020/07/09/doc_1115/</id>
    <published>2020-07-09T02:55:12.000Z</published>
    <updated>2020-07-09T02:54:35.902Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>1、项目业务模块划分原则：高内聚、低耦合、可复用、可扩展、可维护。</p><p>2、根据具体的业务子类型、操作类型等再分为子业务模块，参考业务部门、业务类型、服务对象等依据分为各大业务模块。</p><p>3、新增需求若与原业务模块关联不大，或较少调用关系，则可定义为新的子业务模块。</p><p>4、让程序模块单元的职责单一，可以使你在编写这段程序时关注更少的东西，从而降低难度，减少出错。</p><p>5、先业务后技术，先逻辑后物理，服务的稳定性优先，通过拆分解耦</p><p>6、尽量避免事务，适当采用异步解耦，适当使用缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>lemon-echo微服务架构说明</title>
    <link href="https://github.com/weiecho/2020/07/07/doc_1114/"/>
    <id>https://github.com/weiecho/2020/07/07/doc_1114/</id>
    <published>2020-07-07T03:16:35.000Z</published>
    <updated>2020-07-09T02:53:24.144Z</updated>
    
    <content type="html"><![CDATA[<h6 id="高效稳定-·-简洁易用-·-灵活扩展"><a href="#高效稳定-·-简洁易用-·-灵活扩展" class="headerlink" title="高效稳定 · 简洁易用 · 灵活扩展"></a><code>高效稳定 · 简洁易用 · 灵活扩展</code></h6><p>项目地址：<a href="https://github.com/weiecho/lemon-echo">lemon-echo微服务架构</a></p><p>weiecho微服务架构是基于springcloud + consul的微服务框架设计体系，以人员、时效、成本、品质为基础设计思路，极度适用于小中型开发设计团队，可通过简单调整扩展支持中大型开发设计团队。框架设计过程中整合实际项目经验，利用接口化、消息队列、模块化、服务化、异步化等技术方案保障服务稳定性和可扩展性。</p><p>根据互联网产品多年经验分析，我们的产品无论从任何角度为切入点，最终都希望完成用户支付-服务的闭环思维，在weiecho的架构体系设计时期直接将用户、帐户、商品、订单、交易、消息作为功能架构的基础模块体系，从而结合实际项目体系完成整体微服务体系搭建，以协助团队快速集成完善的开发结构体系。</p><p>依托功能预代入模式的完善架构体系思想，后续功能开发仅需对相应业务逻辑进行部分调整、增加对应的服务模块（如IM、聊天室等），利用类似二次开发方式极大降低开发团队的技术壁垒，降低微服务开发及治理难度，结合代码快速生成器可以在10分钟内完成简单功能开发，非常快发迭代开发的技术团队，尤其适用于50人以下的技术开发团队。</p><h2 id="规划架构说明"><a href="#规划架构说明" class="headerlink" title="规划架构说明"></a>规划架构说明</h2><p>weiecho架构考虑多设备、多应用场景，从应用入口区分了各类应用入口的控制和管理，在功能方面分为应用入口、服务网关、核心服务、公共模块、风控模块、运营管理后台、数据支持等模块。</p><h4 id="应用入口"><a href="#应用入口" class="headerlink" title="应用入口"></a>应用入口</h4><p>应用入口可以接受APP、WEB、小程序、A应用、B应用、外部应用等应用接入，利用服务的项目管理功能可以实现无限扩展的应用接入方式，从而达到类中台的服务架构体系。</p><h4 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h4><p>服务网关主要考虑安全、流控、风控等风险因素，接入参数验证、身份验证、路由策略、流控策略、风控验证等安全模块，保障整体服务安全稳定运行。</p><h4 id="核心服务"><a href="#核心服务" class="headerlink" title="核心服务"></a>核心服务</h4><p>核心服务为项目主要业务服务，目前规划分为聚合服务、用户服务、帐户服务、商品服务、订单服务、交易服务、对账服务、清算服务、消息服务、授权服务、营销服务、售后服务等。市场运营需求可以增加推广服务、广告服务，即时沟通类需求可以扩展IM服务，直播类需求可以扩展直播服务，打赏服务等。</p><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>公共模块作为业务的支持服务，主要包含授权服务、报警服务、消息服务、单号生成器、注册中心、配置中心、定时任务、分布式锁、分库分表模块，服务成熟后可逐步考虑接入生物识别、内容识别、数据服务等模块。</p><h4 id="风控模块"><a href="#风控模块" class="headerlink" title="风控模块"></a>风控模块</h4><p>风控模块为服务安全等核心领域，包含安全认证、资质审查、用户分级、黑白名单、风险预警、风险处置、支付风险、信用风险、征信相关等，可以根据需要完善该模块内容保障整体服务等安全性。</p><h4 id="运营管理后台"><a href="#运营管理后台" class="headerlink" title="运营管理后台"></a>运营管理后台</h4><p>运营管理后台为管理整个服务的入口，通过精确的权限管控分配用户是使用功能，对系统用户、帐户、订单、交易、对账、投诉等信息的查看和维护操作。</p><h4 id="数据支持"><a href="#数据支持" class="headerlink" title="数据支持"></a>数据支持</h4><p>数据支持分为内部数据支持和三方支持，其中内部数据支持包含mysql、redis、rabbit mq、promethes、elk、innerdb等，三方支持包含短信服务、消息服务、OSS文件存储、支付通道、实名认证、生物检测等功能。</p><h2 id="部署架构说明"><a href="#部署架构说明" class="headerlink" title="部署架构说明"></a>部署架构说明</h2><p>用户访问APP、WEB、H5页面通过LBS算法调用到最佳的nginx服务器，nginx通过规则转发调用到指定的服务或服务网关，gatway经过鉴权、风控等安全校验后通过consul注册中心LB路由到指定的业务服务，业务服务根据需要调用对应的数据支持端、RPC服务短信或第三方服务端，完成业务功能后返回对应的数据。</p><p>整个部署架构分为入口访问组、核心服务组、基础支撑组和服务监控组。</p><p>1、LBS域名指向服务域名，开通https、防ddocs等安全性功能。</p><p>2、入口访问组包含nginx、potal web、activity web、gateway服务，nginx需要开通外网流量权限，gateway需打通与核心业务组网段调用，potal web和activity web为前端网页服务，可视情况与nginx服务同机器部署或单独部署。</p><p>3、核心服务组根据各服务压测和预估QPS状况，部署相应量级的服务节点，为保障服务高可用，每个服务至少部署两个节点。</p><p>4、基础支撑组需开放核心业务组网络相互访问，部署consul注册中心集群，consul集群请独立部署并至少部署3个server节点和2+个client节点，DB至少保证主从节点配置，rabbitmq集群使用镜像模式保障服务的高可用，redis根据服务需要主从、集群部署，其他支持服务根据需要部署相应套件。</p><p>服务监控组需开放核心业务组网络相互访问，zabbix、prometheus、zipkin server根据服务需要部署相应节点套件，ELK部署至少3个master节点和3个data节点，数据节点建议内存30G，master节点建议10G，聚合节点等根据需要配置，日志类索引根据需要设置n*3个Primaries（如无特殊需要Replicas设置为0），日志索引名称按天存储。日志收集采用filebeat -&gt; kafka -&gt; logstash -&gt; elasticsearch套件，logstash路由pipeline简化配置和服务管理。</p><h2 id="控制中心模块"><a href="#控制中心模块" class="headerlink" title="控制中心模块"></a>控制中心模块</h2><h4 id="服务网关-gateway"><a href="#服务网关-gateway" class="headerlink" title="服务网关 gateway"></a>服务网关 gateway</h4><p>服务网关基于springcloud原生gateway实现，为整个微服务架构提供简单、有效和统一的API路由管理方式，结合服务的授权体系、风控体系、sentinel流控体系、swagger接口文档等方便统一的管理微服务体系，同时保障服务的安全稳定运行。</p><h4 id="流控后台-sentinel-dashboard"><a href="#流控后台-sentinel-dashboard" class="headerlink" title="流控后台 sentinel-dashboard"></a>流控后台 sentinel-dashboard</h4><p>sentinel流控后台是面向微服务的轻量级流量控制框架，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><h4 id="任务调度-xxl-job-admin"><a href="#任务调度-xxl-job-admin" class="headerlink" title="任务调度 xxl-job-admin"></a>任务调度 xxl-job-admin</h4><p>xxl-job任务调度中心是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</p><h4 id="链路追踪-zipkin"><a href="#链路追踪-zipkin" class="headerlink" title="链路追踪 zipkin"></a>链路追踪 zipkin</h4><p>zipkin链路追踪基于 Google Dapper 实现，用来收集各个服务器上请求链路的跟踪数据，并通过提供的 REST API 接口来辅助查询跟踪数据以实现对分布式系统的监控程序，从而及时发现系统中的存在的风险性问题。</p><h2 id="公共组建模块"><a href="#公共组建模块" class="headerlink" title="公共组建模块"></a>公共组建模块</h2><h4 id="公共配置-configurator"><a href="#公共配置-configurator" class="headerlink" title="公共配置 configurator"></a>公共配置 configurator</h4><p>公共配置模块整理和优化了服务的常用配置，采用配置但不启用的方式进行标准化处理，服务仅需继承相应类并加上注解@Configuration就可以启用功能。</p><h4 id="公共资源-framework"><a href="#公共资源-framework" class="headerlink" title="公共资源 framework"></a>公共资源 framework</h4><p>公共资源模块聚合类一些常用但公共处理类，增强服务语法的统一性和功能的准确性，减少大量重复造轮子的现象。</p><h4 id="序列号组件-serialno"><a href="#序列号组件-serialno" class="headerlink" title="序列号组件 serialno"></a>序列号组件 serialno</h4><p>序列号生成组件能够自动产生指定功能的递增序列号，采用服务独立自主管理序列号的方式，降低使用独立序列号服务的耦合性，采用redis作为预生成序列号池缓存区，加速服务的ID获取的处理速度。</p><h4 id="消息组件封装-rabbit-mq"><a href="#消息组件封装-rabbit-mq" class="headerlink" title="消息组件封装 rabbit-mq"></a>消息组件封装 rabbit-mq</h4><p>消息组件封装默认封装的是rabbit的topic模式，结合延迟插件默认生成普通topic交换机和延迟队列交换机，在生产端调用发送消息是是否为延迟消息，消费配置queue时选择是否为延迟队列。一般情况下topic模式+延迟队列能够完全满足服务的各种消息需求。</p><h4 id="分布式锁组件-distribution-lock"><a href="#分布式锁组件-distribution-lock" class="headerlink" title="分布式锁组件 distribution-lock"></a>分布式锁组件 distribution-lock</h4><p>分布式锁组件提供了分布式服务锁的功能，采用redis作为锁的计算核心，可以直接在方法上注解声明锁，同时采用注解方法参数作为降低锁粒度，从而更加灵活完善的支撑业务功能。</p><h4 id="分库分表组件-sharding-db"><a href="#分库分表组件-sharding-db" class="headerlink" title="分库分表组件 sharding-db"></a>分库分表组件 sharding-db</h4><p>分库分表组件封装了sharding-jdbc作为功能内核，调整优化了配置方式和支持类型，可在大量不改变配置文件的状况扩展出单库数据源、主从数据源、分库数据源三种配置模式，极大的方便服务升级改造。</p><h4 id="流控降级组件-sentinel-client"><a href="#流控降级组件-sentinel-client" class="headerlink" title="流控降级组件 sentinel-client"></a>流控降级组件 sentinel-client</h4><p>流控降级组件封装了sentinel作为功能内核，调整优化了分布式配置存取、实时监控数据持久存储和流控熔断异常处理逻辑，可以实时查看服务状况、动态调整服务的熔断或流控阈值，结合流控熔断监控报警实时保障服务的安全稳定。</p><h2 id="标准服务结构"><a href="#标准服务结构" class="headerlink" title="标准服务结构"></a>标准服务结构</h2><p>weiecho标准服务包含xxx-app（服务启动入口）、xxx-core（业务功能核心）、xxx-enum（服务全局枚举）、xxx-job（定时任务包）、xxx-rpc（rpc服务接口SDK）模块，考虑初期业务量、维护人员、服务维护难度及大部分微服务功能等状况，标准服务结构采用单服务聚合部署方式，降低开发维护难度，加速服务业务功能迭代开发上线。</p><p>本框架为保障服务接口的安全及一致性，利用强约束的方式保障所有问题暴露在上线部署前，约定服务提供方编写远程调用接口SDK提供给调用方。</p><h3 id="模块继承规则："><a href="#模块继承规则：" class="headerlink" title="模块继承规则："></a>模块继承规则：</h3><blockquote><p>1、xxx-app可引入xxx-core、xxx-job、xxx-rpc模块；</p><p>2、xxx-core可引入xxx-enum模块，支撑业务核心功能模块，可服务业务量状况拆分出event（MQ事件）模块走独立服务入口；</p><p>3、xxx-job根据需要使用xxx-app服务入口或独立服务走任务服务入口；</p><p>4、xxx-rpc可引入xxx-enum模块，也可以根据需要使用xxx-app服务入口或独立服务走任务服务入口。</p></blockquote><h4 id="服务启动入口-xxx-app"><a href="#服务启动入口-xxx-app" class="headerlink" title="服务启动入口 xxx-app"></a>服务启动入口 xxx-app</h4><p>xxxApplication.java为服务启动入口类，主要包含springboot服务启动main方法和部分启动注解；</p><p>cn.echo.xxx.config为服务配置包，主要包含服务初始化各项配置类，如：database、redis、cache、mq、mvc、job等配置；</p><p>cn.echo.xxx.controller为接口控制包，包含api（业务接口）、portal（后台接口）、rpc（rpc接口）控制实现类，其中rpc为继承xxx-rpc模块等实现类；</p><p>cn.echo.xxx.execption为服务异常处理包，默认包含GlobalExceptionHandler继承实现全局异常处理类cn.echo.framework.response.DefaultGlobalExceptionHandler。</p><h4 id="业务功能核心-xxx-core"><a href="#业务功能核心-xxx-core" class="headerlink" title="业务功能核心 xxx-core"></a>业务功能核心 xxx-core</h4><p>cn.echo.xxx.core.dao为数据处理包，主要包含mybatis调用数据源接口类；</p><p>cn.echo.xxx.core.entity为数据实体包，主要包含数据库表对应字段实体类；</p><p>cn.echo.xxx.core.pojo为业务实体包，主要为业务上下文封装需要的相关实体类；</p><p>cn.echo.xxx.core.event为MQ事件包，主要包含constant（常量）、receiver（接收处理）、sender（发送处理），其中constant主要包含queue、routing key常量定义；</p><p>cn.echo.xxx.core.service为业务逻辑接口包，主要定义业务逻辑功能接口，impl为逻辑接口的实现类。</p><h4 id="服务全局枚举-xxx-enum"><a href="#服务全局枚举-xxx-enum" class="headerlink" title="服务全局枚举 xxx-enum"></a>服务全局枚举 xxx-enum</h4><p>cn.echo.xxx.em.enums为全局枚举包，主要配合业务需要定义各类枚举；</p><p>cn.echo.xxx.em.response为全局服务响应码包，主要特殊业务状况下返回的信息提示码（警告、异常等），此异常码在服务创建时统一分配前缀，各服务维护自己的异常码，异常码类继承自框架类cn.echo.framework.response.ResultCode。</p><h4 id="定时任务包-xxx-job"><a href="#定时任务包-xxx-job" class="headerlink" title="定时任务包 xxx-job"></a>定时任务包 xxx-job</h4><p>cn.echo.xxx.job为定时任务实现包，利用xxljob实现任务调度工作，根据最新2.2.0版本实现，在方法体注解@XxlJob(“xxxHandler”)并按照官方语法即可完成任务开发，结合后台配置规则实现动态任务调度管理。</p><h4 id="远程调用接口SDK-xxx-rpc"><a href="#远程调用接口SDK-xxx-rpc" class="headerlink" title="远程调用接口SDK xxx-rpc"></a>远程调用接口SDK xxx-rpc</h4><p>cn.echo.xxx.rpc.client远程调用SDK接口包，用于定义FeignClient提供给调用方的接口；</p><p>cn.echo.xxx.rpc.dto远程调用SDK接口实体包，主要为SDK接口上下文封装需要的相关实体类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;高效稳定-·-简洁易用-·-灵活扩展&quot;&gt;&lt;a href=&quot;#高效稳定-·-简洁易用-·-灵活扩展&quot; class=&quot;headerlink&quot; title=&quot;高效稳定 · 简洁易用 · 灵活扩展&quot;&gt;&lt;/a&gt;&lt;code&gt;高效稳定 · 简洁易用 · 灵活扩展&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="架构" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="lemon-echo" scheme="https://github.com/weiecho/tags/lemon-echo/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel流控降级原则</title>
    <link href="https://github.com/weiecho/2020/07/02/stu_1117/"/>
    <id>https://github.com/weiecho/2020/07/02/stu_1117/</id>
    <published>2020-07-02T06:06:55.000Z</published>
    <updated>2020-07-03T06:10:14.732Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><ul><li>Sentinel 是围绕着资源来工作的。</li><li>编码时，只需要关心如何定义资源，即哪些方法/代码块需要保护，而不需要关注如何保护这个资源。</li><li>通过添加规则来保护资源，规则添加即时生效。</li></ul><h3 id="规则配置原则"><a href="#规则配置原则" class="headerlink" title="规则配置原则"></a>规则配置原则</h3><ul><li>按照应用处理能力进行流控：<ul><li>按服务提供方流控原则</li><li>削峰填谷原则</li><li>冷启动原则</li><li>联动控制原则</li></ul></li><li>强依赖隔离原则</li><li>弱依赖降级原则</li><li>系统保护原则，详情请参见[系统保护篇]</li></ul><h3 id="弱依赖降级"><a href="#弱依赖降级" class="headerlink" title="弱依赖降级"></a>弱依赖降级</h3><p>当若依赖的第三方应用出错不会影响而整体流程，则称之为弱依赖。对于弱依赖不稳定时，需要配置降级原则来保护系统稳定性。</p><p>在实际业务中，应用通常会调用依赖方（远程服务、数据库、第三方 API 等）来完成服务。例如，支付的时需要远程调用银联提供的 API。然而依赖方的稳定性是不能保证的。若依赖方出现不稳定的情况，则请求和调用依赖方的方法的的响应时间变长，线程产生堆积，最终可能耗尽自身的线程数，导致应用本身不可用。</p><p>在复杂链路中，若某一环不稳定，就可能会层层渲染，最终导致整个链路都不可用。</p><p>针对以上情况，可以使用对依赖方配置降级原则来保证系统稳定性。</p><p>###强依赖隔离</p><p>若依赖的第三方应用或组件，或者应用自身的内部方法出错会影响而整体流程，则称之为强依赖。对于强依赖，需要配置隔离原则来保护系统稳定性。</p><p>当强依赖出现不稳定的时候，可以通过配置并发线程数隔离原则来限制不稳定的强依赖并发数，隔离强依赖。配置并发线程数隔离原则后，无需再进行线程池隔离，sentinel 会控制资源的线程数。当请求数超过阈值时，sentinel 将拒绝多余的请求，直到堆积的线程处理完成，以此来达到信号量隔离的效果。</p><p>线程数目超出时，设置 快速失败 能够有效地防止自己被慢调用所影响。</p><h3 id="系统防护"><a href="#系统防护" class="headerlink" title="系统防护"></a>系统防护</h3><p>系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>一般性系统自适应保护的思路是根据硬指标即系统的负载来做系统过载保护。即当系统负载高于某个阈值，就禁止或者减少流量的进入；若负载恢复，则恢复流量的进入。这样会造成两个不可避免的问题：</p><ul><li>若根据负载的情况来调节流量的通过率，则会产生延迟。若当前通过率的调整会导致负载增大，那么至少要过 1 秒之后才能被观测到；同理，若当前通过率调整会使负载降低，也需要 1 秒之后才能继续调整。这种方法会浪费系统的处理能力。导致我们看到的负载曲线产生锯齿。</li><li>通过率恢复慢。在下游应用不可靠，应用响应时间很长，从而导致负载很高的场景中，若下游应用恢复时，应用响应时间也会随之减短，此时通过率理应会大幅度增大。但由于此时负载仍然很高，所以通过率的恢复慢。</li></ul><p>为解决上述问题，sentinel在系统自适应保护的做法是：用每分钟的负载作为启动控制流量，使用请求的响应时间以及当前系统正在处理的请求速率来决定通过的流量。旨在在系统不被拖垮的情况下，提高系统的吞吐率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/weiecho/sentinel-client&quot;&gt;sentinel流控防护&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本原则&quot;&gt;&lt;a href=&quot;#基本原则&quot; class=&quot;headerlink&quot; title=&quot;基本
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel系统防护</title>
    <link href="https://github.com/weiecho/2020/06/20/stu_1116/"/>
    <id>https://github.com/weiecho/2020/06/20/stu_1116/</id>
    <published>2020-06-20T02:23:41.000Z</published>
    <updated>2020-07-03T06:06:06.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h3><p>长期以来，系统自适应保护的思路是根据硬指标即系统的负载来做系统过载保护。即当系统负载高于某个阈值，就禁止或者减少流量的进入；若负载恢复，则恢复流量的进入。这样会造成两个不可避免的问题：</p><ul><li>若根据负载的情况来调节流量的通过率，则会产生延迟。若当前通过率的调整会导致负载增大，那么至少要过 1 秒之后才能被观测到；同理，若当前通过率调整会使负载降低，也需要 1 秒之后才能继续调整。这种方法会浪费系统的处理能力。导致我们看到的负载曲线产生锯齿。</li><li>通过率恢复慢。在下游应用不可靠，应用响应时间很长，从而导致负载很高的场景中，若下游应用恢复时，应用响应时间也会随之减短，此时通过率理应会大幅度增大。但由于此时负载仍然很高，所以通过率的恢复慢。</li></ul><p>为解决上述问题，sentinel 应用流控降级在系统自适应保护的做法是：用每分钟的负载作为启动控制流量，使用请求的响应时间以及当前系统正在处理的请求速率来决定通过的流量。旨在在系统不被拖垮的情况下，提高系统的吞吐率。</p><h3 id="功能原理"><a href="#功能原理" class="headerlink" title="功能原理"></a>功能原理</h3><p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/stu/15671348491.png" alt="image" title="功能原理">                </div>                <div class="image-caption">功能原理</div>            </figure><p>若用 T 来表示水管内部的水量，用 RT 来表示请求的处理时间，用 P 来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 P * RT 个请求。即当 T ≈ QPS * Avg(RT) 的时候，可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会继续增加。当入口的流量是水管出来的流量的最大的值的时候，水管的处理能力达到最大利用。</p><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量生效。入口流量指的是进入应用的流量（EntryType.IN），例如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。系统规则支持四种阈值类型：</p><ul><li>Load（仅对 Linux/Unix-like 机器生效）：当系统 load1 超过阈值且系统当前的并发线程数超过系统容量时才会触发系统保护。</li><li>RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护。</li><li>线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;系统防护即从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>shardingsphere不支持LocalDateTime/LocalDate</title>
    <link href="https://github.com/weiecho/2020/06/17/exp_1117/"/>
    <id>https://github.com/weiecho/2020/06/17/exp_1117/</id>
    <published>2020-06-17T07:56:39.000Z</published>
    <updated>2020-07-13T08:40:31.743Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shardingsphere默认使用等jdk版本是1.7，所以并没有支持jdk1.8+的LocalDateTime等特性</span><br><span class="line"></span><br><span class="line">我已经在fork上扩展了这个特性，并将JDK的功能升级到jdk1.8。</span><br><span class="line"></span><br><span class="line">主要验证了支持 Mybatis5+</span><br><span class="line"></span><br><span class="line">4.0.0-RC2-1.8</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;lonyee1989&#x2F;incubator-shardingsphere&#x2F;tree&#x2F;4.0.0-RC2-1.8</span><br></pre></td></tr></table></figure><h3 id="直接上实现代码"><a href="#直接上实现代码" class="headerlink" title="直接上实现代码"></a>直接上实现代码</h3><p><a href="https://github.com/lonyee1989/incubator-shardingsphere/tree/4.0.0-RC2-1.8">fork代码</a></p><p>1、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert value via expected class type.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value original value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> convertType expected class type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> converted value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">convertValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertNullValue(convertType);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (value.getClass() == convertType) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalDateTimeValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalDate.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalDateValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LocalTime.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertLocalTimeValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertNumberValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertDateValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertByteArrayValue(value, convertType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (String.class.equals(convertType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalDateTimeValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalDateValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">convertLocalTimeValue</span><span class="params">(<span class="keyword">final</span> Object value, <span class="keyword">final</span> Class&lt;?&gt; convertType)</span> </span>&#123;</span><br><span class="line">    Timestamp timestamp = (Timestamp) value;</span><br><span class="line">    <span class="keyword">return</span> timestamp.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(mergeResultSet.getValue(columnIndex, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(mergeResultSet.getValue(columnLabel, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(resultSet.getValue(columnIndex, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.class.equals(type) || LocalDate.class.equals(type) || LocalTime.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) ResultSetUtil.convertValue(resultSet.getValue(columnLabel, Timestamp.class), type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、package org.apache.shardingsphere.shardingjdbc.jdbc.unsupported;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> columnIndex, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String columnLabel, <span class="keyword">final</span> Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException(<span class="string">"getObject with type"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="shardingsphere" scheme="https://github.com/weiecho/tags/shardingsphere/"/>
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="架构设计" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel熔断降级</title>
    <link href="https://github.com/weiecho/2020/06/06/stu_1115/"/>
    <id>https://github.com/weiecho/2020/06/06/stu_1115/</id>
    <published>2020-06-06T06:22:42.000Z</published>
    <updated>2020-07-03T06:01:01.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><p>除流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。</p><p>由于调用关系的复杂性，如果调用链路中的某个资源不稳定，最终会导致请求发生堆积。熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>Sentinel 熔断降级支持以下几种策略：</p><ul><li>RT 模式（秒级）：若持续进入 5 个请求，它们资源的平均响应时间都超过阈值（秒级平均 RT，以 ms 为单位），资源调用会被熔断。在接下的降级时间窗口（在降级规则中配置，以 s 为单位）之内，对这个方法的调用都会自动地返回（抛出 DegradeException）。</li><li>异常比例模式（秒级）：当资源的每秒异常数占通过量的比值超过阈值之后，资源进入降级状态，即在接下的降级时间窗口（在降级规则中配置，以 s 为单位））之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li><li>异常数模式（分钟级）：当资源最近 1 分钟的异常数目超过阈值之后会进行熔断。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel流量控制（限流）</title>
    <link href="https://github.com/weiecho/2020/05/25/stu_1114/"/>
    <id>https://github.com/weiecho/2020/05/25/stu_1114/</id>
    <published>2020-05-25T05:18:42.000Z</published>
    <updated>2020-07-03T03:24:54.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>流控，即流量控制（Flow Control），根据流量、并发线程数、响应时间等指标，把随机到来的流量调整成合适的形状，即流量塑形。避免应用被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="流量控制有以下几个角度"><a href="#流量控制有以下几个角度" class="headerlink" title="流量控制有以下几个角度:"></a>流量控制有以下几个角度:</h3><p>运行指标，例如 QPS、并发线程数等。</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系，调用来源等。</li><li>控制效果，例如直接拒绝、Warm Up（预热）、排队等待等。</li></ul><p>一条流控规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><ul><li>资源名：即流控规则的作用对象</li><li>阈值：流控阈值</li><li>阈值类型：流控阈值类型（QPS 或并发线程数）</li><li>来源应用：流控规则针对的调用来源，若为 default 则不区分调用来源</li><li>流控方式：调用关系限流策略</li><li>流控模式：即流控效果，包括快速失败、Warm Up、排队等待模式</li></ul><h3 id="运行指标"><a href="#运行指标" class="headerlink" title="运行指标"></a>运行指标</h3><p>流量控制支持通过以下运行指标进行流量塑形：</p><ul><li><p>基于 QPS<br>QPS 模式根据资源的实时 QPS 进行流量控制。当 QPS 超过指定阈值时采取相应的控制策略。</p></li><li><p>基于线程数<br>线程数模式按照资源的并发线程数（即该资源正在执行的线程数）进行流量控制。</p><p>并发线程数限流用于保护业务线程数不被耗尽。例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对太多线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离）。这种隔离方案虽然隔离性比较好，但是代价就是线程数目太多，线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。Sentinel 并发线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目，如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。</p></li></ul><h3 id="控制效果"><a href="#控制效果" class="headerlink" title="控制效果"></a>控制效果</h3><p>流控方式（控制效果）指的是，当阈值类型为 QPS 时，选择如何控制流量，处理被拦截的流量，实现流量塑形。流量控制的手段包括以下几种：快速失败、Warm Up、排队等待。</p><p>说明 控制效果仅对 QPS 限流生效。</p><ul><li><p>快速失败<br>快速失败方式是默认的流量控制方式，当 QPS 超过规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出 FlowException。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p></li><li><p>Warm Up<br>当系统长期处于空闲的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过 Warm Up 模式（预热模式），让通过的流量缓慢增加，经过设置的预热时间以后，到达系统处理请求速率的设定值。</p><p>Warm Up 模式默认会从设置的 QPS 阈值的 1/3 开始慢慢往上增加至 QPS 设置值。</p></li><li><p>排队等待<br>排队等待模式下会严格控制请求通过的间隔时间，即请求会匀速通过，允许部分请求排队等待，通常用于消息队列削峰填谷等场景。需设置具体的超时时间，当计算的等待时间超过超时时间时请求就会被拒绝。</p><p>例如，QPS 配置为 5，则代表请求每 200 ms 才能通过一个，多出的请求将排队等待通过。超时时间代表最大排队时间，超出最大排队时间的请求将会直接被拒绝。排队等待模式下，QPS 设置值不要超过 1000（请求间隔 1 ms）。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/stu/12838192381.png" alt="image" title="排队等待">                </div>                <div class="image-caption">排队等待</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;流控，即流量控制（Flow Control），根据流量、并发线程数、响应时间等指标，把随机到来的流量调整成合适的形状，即流量塑形。避免应用被瞬时的流量高峰冲垮，从而保障应用的高可用性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a hr
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel流控降级快速入门</title>
    <link href="https://github.com/weiecho/2020/05/02/stu_1113/"/>
    <id>https://github.com/weiecho/2020/05/02/stu_1113/</id>
    <published>2020-05-02T04:18:12.000Z</published>
    <updated>2020-07-03T03:25:00.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Sentinel以流量为切入点，从流量控制、熔断降级、系统保护等多个维度来帮助您保障服务的稳定性，提供更专业稳定的流量防护手段、秒级的流量水位分布分析功能。</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sentinel-client">sentinel流控防护</a></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>Sentinel广泛用于秒杀场景、消息削峰填谷、集群流量控制、实时熔断等场景中，从多个维度保障您的业务稳定性。</p><p>在一个常见的分布式应用中，如下图所示。一个请求先通过终端到达 Gateway，再经过防火墙和网络负载均衡，其中还包括调用下游的其它服务和第三方应用，才能到达前端网络服务。AHAS 应用流控降级在不同的层次以流量为切面提供秒级实时的流量分析（例如在客户端层提供流量实时监控和水位诊断分析功能），帮助运维人员采取针对性的防护措施，全方位地保护应用的稳定性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/stu/12213538915.png" alt="image" title="Sentinel服务">                </div>                <div class="image-caption">Sentinel服务</div>            </figure><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><p>秒级流量分析功能，动态规则实时推送。<br>专业多样化的防护手段：</p><ul><li>入口流量控制：按照服务容量进行流量控制，常用于应用入口，例如： Gateway、前端应用、服务提供方等。</li><li>热点隔离：将热点和普通流量隔离出来，避免无效热点抢占正常流量的容量。</li><li>对依赖方隔离 / 降级：对应用和应用之间、应用内部采用隔离 / 降级手段，将不稳定的依赖的对应用的影响减至最小，从而保证应用的稳定性。</li><li>系统防护：Sentinel可以根据系统的能力（例如 Load、CPU 使用率等）来动态调节入口的流量，保证系统稳定性。<br>实时的单机监控能力，强大的聚合监控和历史监控查询能力。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Sentinel以流量为切入点，从流量控制、熔断降级、系统保护等多个维度来帮助您保障服务的稳定性，提供更专业稳定的流量防护手段、秒级的流量水位分布分析功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="流控降级" scheme="https://github.com/weiecho/tags/%E6%B5%81%E6%8E%A7%E9%99%8D%E7%BA%A7/"/>
    
      <category term="sentinel" scheme="https://github.com/weiecho/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sharding-db接入使用说明</title>
    <link href="https://github.com/weiecho/2020/03/02/doc_1113/"/>
    <id>https://github.com/weiecho/2020/03/02/doc_1113/</id>
    <published>2020-03-02T04:26:35.000Z</published>
    <updated>2020-07-03T03:09:12.316Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ShardingSphere是开源的分布式数据库中间件解决方案组成的生态圈，由Sharding-jdbc、Sharding-Proxy等组成，提供标准化的数据分片、安全控制、分布式事务和数据库治理功能，本文主要介绍sharding-db在项目中的使用。</p><p>Sharding-db是对Sharding-jdbc的功能封装，方便功能的对接，统一项目团队对数据源的对接</p></blockquote><p>项目地址：<a href="https://github.com/weiecho/sharding-db">sharding-db</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/doc/20719175617.png" alt="image" title="Sharding-jdbc分片过程">                </div>                <div class="image-caption">Sharding-jdbc分片过程</div>            </figure><p>Sharding-jdbc根据SQL语句进行词语解析，上下文匹配数据库和表的分片策略生成路由路径，将分表配置中的逻辑库表改写为真实库表SQL语句，发送到底层数据源执行，将从各个数据节点获取的多数据结果集，组合成为一个结果集并正确的返回至请求客户端。</p><p>POM配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.weiecho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-db<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Database配置"><a href="#Database配置" class="headerlink" title="Database配置"></a>Database配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//单数据源模式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> <span class="keyword">extends</span> <span class="title">DatabaseSingletonConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主从数据源模式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> <span class="keyword">extends</span> <span class="title">DatabaseMasterSlaveConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分表数据源模式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> <span class="keyword">extends</span> <span class="title">DatabaseShardingConfigurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sharding.jdbc:</span><br><span class="line">  default-data-source-name: ms_ds_0</span><br><span class="line">  data-sources:</span><br><span class="line">    ds_master:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">      jdbc-url: jdbc:mysql://127.0.0.1:3306/test_db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line">      initial-size: 1</span><br><span class="line">      minimum-idle: 3</span><br><span class="line">      maximum-pool-size: 20</span><br><span class="line">      idle-timeout: 60000</span><br><span class="line">      max-lifetime: 180000</span><br><span class="line">      connection-test-query: select 1</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: true</span><br><span class="line">      connection-init-sql: set names utf8mb4</span><br><span class="line">    ds_slave:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">      jdbc-url: jdbc:mysql://127.0.0.1:3307/test_db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line">      initial-size: 1</span><br><span class="line">      minimum-idle: 3</span><br><span class="line">      maximum-pool-size: 20</span><br><span class="line">      idle-timeout: 60000</span><br><span class="line">      max-lifetime: 180000</span><br><span class="line">      connection-test-query: select 1</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: true</span><br><span class="line">      connection-init-sql: set names utf8mb4</span><br><span class="line">  master-slave-rules:</span><br><span class="line">    - name: ms_ds_0</span><br><span class="line">      master-data-source-name: ds_master</span><br><span class="line">      slave-data-source-names: ds_slave</span><br><span class="line">      load-balance-strategy: round_robin</span><br></pre></td></tr></table></figure><h3 id="分表策略配置"><a href="#分表策略配置" class="headerlink" title="分表策略配置"></a>分表策略配置</h3><p>重写DatabaseShardingConfigurator 的分表策略实现相关功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置分表策略TableRule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;TableRuleConfiguration&gt; <span class="title">tableRuleConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置绑定表分组BindingTable</span></span><br><span class="line"><span class="comment"> * 关联多表查询的时候避免笛卡尔积的组合出现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">bindingTableGroups</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据安全配置（脱敏）"><a href="#数据安全配置（脱敏）" class="headerlink" title="数据安全配置（脱敏）"></a>数据安全配置（脱敏）</h3><p>敏感数据脱敏，重写DatabaseShardingConfigurator的加密规则实现相关功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据脱敏策略EncryptRule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EncryptRuleConfiguration <span class="title">encryptRuleConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广播表策略"><a href="#广播表策略" class="headerlink" title="广播表策略"></a>广播表策略</h3><p>用于数据源分片下，每个数据源都保存相同表全量数据，如字典表，配置表等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置广播表列表BroadcastTables</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">broadcastTables</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制路由至主库"><a href="#强制路由至主库" class="headerlink" title="强制路由至主库"></a>强制路由至主库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HintManager hintManager = HintManager.getInstance();</span><br><span class="line">hintManager.setMasterRouteOnly();</span><br></pre></td></tr></table></figure><p>推荐使用try with resource方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (HintManager hintManager = HintManager.getInstance()) &#123;</span><br><span class="line">    hintManager.setMasterRouteOnly();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制路由至指定读库"><a href="#强制路由至指定读库" class="headerlink" title="强制路由至指定读库"></a>强制路由至指定读库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HintManager hintManager = HintManager.getInstance();</span><br><span class="line">hintManager.setDatabaseShardingValue(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>推荐使用try with resource方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (HintManager hintManager = HintManager.getInstance()) &#123;</span><br><span class="line">    hintManager.setDatabaseShardingValue(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ShardingSphere是开源的分布式数据库中间件解决方案组成的生态圈，由Sharding-jdbc、Sharding-Proxy等组成，提供标准化的数据分片、安全控制、分布式事务和数据库治理功能，本文主要介绍sharding-db在项目中的使
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="数据源" scheme="https://github.com/weiecho/tags/%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    
      <category term="分库分表" scheme="https://github.com/weiecho/tags/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    
      <category term="shardingsphere" scheme="https://github.com/weiecho/tags/shardingsphere/"/>
    
  </entry>
  
  <entry>
    <title>修复shardingsphere-4.0.0不能正常配置问题</title>
    <link href="https://github.com/weiecho/2019/12/10/exp_1115/"/>
    <id>https://github.com/weiecho/2019/12/10/exp_1115/</id>
    <published>2019-12-10T13:21:36.000Z</published>
    <updated>2020-07-03T06:00:06.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前官方已经邀请我调整了说明文档，文档已经和最新代码一致！</p><p>如果您准备自己调整配置注入方式，可以参考本次修复过程。</p></blockquote><p>Sharingsphere在根据官方配置为Master-slave rule configuration模式时启动会报错如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-ad259ae04f5772a5.png" alt="image" title="Master-slave">                </div>                <div class="image-caption">Master-slave</div>            </figure><p>原因在4.0.0-x版本中，将代码迁移至apache时，小伙伴傲娇的将参数实现改成了如下，同时没有了无参数构造函数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-ca8d34c791674f3b.png" alt="image" title="新版本MasterSlaveRuleConfiguration代码">                </div>                <div class="image-caption">新版本MasterSlaveRuleConfiguration代码</div>            </figure><p>再看看3.0.x原版的旧代码实现状况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-06426fd62bfa2564.png" alt="image" title="旧版本MasterSlaveRuleConfiguration代码">                </div>                <div class="image-caption">旧版本MasterSlaveRuleConfiguration代码</div>            </figure><p>官方示例居然还有无参数创建的示例，试问是怎么做到的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-709903c299a77393.png" alt="image" title="shardingsphere官方文档示例">                </div>                <div class="image-caption">shardingsphere官方文档示例</div>            </figure><p>从这点看有被改写忽略的问题，同时按照官方配置，出现如上的配置启动报错问题！！！</p><h3 id="我是犀利的分割线-—-下面是硬写解决方案"><a href="#我是犀利的分割线-—-下面是硬写解决方案" class="headerlink" title="我是犀利的分割线 —- 下面是硬写解决方案"></a>我是犀利的分割线 —- 下面是硬写解决方案</h3><hr><p>创建新类MasterSlaveRuleConfig.java，复制官方新版本MasterSlaveRuleConfiguration，改为如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-5366273ee48d6345.png" alt="image" title="改写MasterSlaveRuleConfiguration">                </div>                <div class="image-caption">改写MasterSlaveRuleConfiguration</div>            </figure><p>1、@Getter改为@Data，支持配置读写</p><p>2、去掉内部private对象的final限定</p><p>3、加入MasterSlaveRuleConfiguration无参数构造函数</p><p>配置改造完成，下面是调整配置函数：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/exp/1721717-21ae73c993b20185.png" alt="image" title="重写配置MasterSlaveRuleConfiguration">                </div>                <div class="image-caption">重写配置MasterSlaveRuleConfiguration</div>            </figure><p>MasterSlaveRuleConfig配置在 sharding.master-slave-rule 下面，和官方一致。</p><p>服务启动～～～～～  happy time 😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前官方已经邀请我调整了说明文档，文档已经和最新代码一致！&lt;/p&gt;
&lt;p&gt;如果您准备自己调整配置注入方式，可以参考本次修复过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sharingsphere在根据官方配置为Master-slave rule
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="shardingsphere" scheme="https://github.com/weiecho/tags/shardingsphere/"/>
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="架构设计" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>lemon-rabbitmq实现rabbitMQ的解耦方式</title>
    <link href="https://github.com/weiecho/2019/12/02/doc_1111/"/>
    <id>https://github.com/weiecho/2019/12/02/doc_1111/</id>
    <published>2019-12-02T02:34:12.000Z</published>
    <updated>2020-07-08T03:16:30.613Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/weiecho/lemon-rabbitmq">lemon-rabbitmq</a></p><p>lemon-rabbitmq   消息生产端</p><p>lemon-rabbitmq-protocol   消息协议层</p><p>lemon-rabbitmq-consumer   消息消费端</p><hr><h4 id="消息协议层"><a href="#消息协议层" class="headerlink" title="消息协议层"></a>消息协议层</h4><p>通过Jackson2序列化/反序列化，实现消息传递和对象接收</p><h4 id="消息生产端"><a href="#消息生产端" class="headerlink" title="消息生产端"></a>消息生产端</h4><p>1、通过发送带有消费端服务类名称和方法请求头，控制消费端调用执行消费发送的信息</p><p>2、利用消息回调接口ConfirmCallback确保消息安全发送至broker服务器，处理效率比事物方式更高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">final</span> String serviceName, <span class="keyword">final</span> String serviceMethodName,<span class="keyword">final</span> String correlationId, Object request)</span> </span>&#123;</span><br><span class="line">   logger.info(<span class="string">"sendMessage [this.&#123;&#125;, serviceMethodName:&#123;&#125; serviceName:&#123;&#125; correlationId: &#123;&#125;]"</span>, <span class="keyword">this</span>.getClass(), serviceMethodName, serviceName, correlationId);</span><br><span class="line">   rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">   rabbitTemplate.setCorrelationKey(correlationId);</span><br><span class="line">   rabbitTemplate.convertAndSend(routingkey, request, <span class="keyword">new</span> MessagePostProcessor() &#123;            </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">              message.getMessageProperties().setAppId(appId);</span><br><span class="line">              message.getMessageProperties().setTimestamp(<span class="keyword">new</span> Date());</span><br><span class="line">              message.getMessageProperties().setMessageId(UUID.randomUUID().toString());</span><br><span class="line">              message.getMessageProperties().setCorrelationId(correlationId.getBytes());</span><br><span class="line">              message.getMessageProperties().setHeader(<span class="string">"ServiceMethodName"</span>, serviceMethodName);</span><br><span class="line">              message.getMessageProperties().setHeader(<span class="string">"ServiceName"</span>, serviceName);</span><br><span class="line">              <span class="keyword">return</span> message;</span><br><span class="line">          &#125;</span><br><span class="line">   &#125;, <span class="keyword">new</span> CorrelationData(correlationId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息消费端"><a href="#消息消费端" class="headerlink" title="消息消费端"></a>消息消费端</h4><p>1、监听MQ消息，利用method.invoke调用指定的服务类名称和方法，消费接收到的消息</p><p>2、使用Ack/Nack手动确认消息处理状态，保证broker消息被正确消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"----- received"</span> + message.getMessageProperties());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object msg = messageConverter.fromMessage(message);</span><br><span class="line"><span class="keyword">if</span> (!appId.equals(message.getMessageProperties().getAppId()))&#123;</span><br><span class="line">        channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"非法应用appId:"</span> + message.getMessageProperties().getAppId());</span><br><span class="line">&#125;</span><br><span class="line">Object service = ctx.getBean(message.getMessageProperties().getHeaders().get(<span class="string">"ServiceName"</span>).toString());</span><br><span class="line">String serviceMethodName = message.getMessageProperties().getHeaders().get(<span class="string">"ServiceMethodName"</span>).toString();</span><br><span class="line">Method method = service.getClass().getMethod(serviceMethodName, msg.getClass());</span><br><span class="line">       method.invoke(service, msg);</span><br><span class="line">       <span class="comment">//确认消息成功消费</span></span><br><span class="line">       channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"------ err"</span>+ e.getMessage());</span><br><span class="line">       channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/weiecho/lemon-rabbitmq&quot;&gt;lemon-rabbitmq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;lemon-rabbitmq   消息生产端&lt;/p&gt;
&lt;p&gt;lemon-rabbitmq-protocol 
      
    
    </summary>
    
    
      <category term="开源文档" scheme="https://github.com/weiecho/categories/%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="springboot" scheme="https://github.com/weiecho/tags/springboot/"/>
    
      <category term="mq" scheme="https://github.com/weiecho/tags/mq/"/>
    
      <category term="ack/nack" scheme="https://github.com/weiecho/tags/ack-nack/"/>
    
  </entry>
  
  <entry>
    <title>代码习惯在细节</title>
    <link href="https://github.com/weiecho/2019/11/05/exp_1112/"/>
    <id>https://github.com/weiecho/2019/11/05/exp_1112/</id>
    <published>2019-11-05T07:12:12.000Z</published>
    <updated>2020-07-03T02:04:19.223Z</updated>
    
    <content type="html"><![CDATA[<p>分布式服务框架维护人员增多或变更，会出现质量的下降的问题，尤其是框架代码，要时刻牢记的细节。可能下面要讲的这些，大家都会觉得很简单，很基础，但要做到时刻牢记。在每一行代码中都考虑这些因素，是需要很大耐心的。</p><h3 id="防止空指针和下标越界"><a href="#防止空指针和下标越界" class="headerlink" title="防止空指针和下标越界"></a>防止空指针和下标越界</h3><p>这是我最不喜欢看到的异常，尤其在核心框架中，我更愿看到信息详细的参数不合法异常。这也是一个编写健壮程序的开发人员，在写每一行代码都应在潜意识中防止的异常。基本上要能确保每一次写完的代码，在不测试的情况下，都不会出现这两个异常才算合格。</p><h3 id="保证线程安全性和可见性"><a href="#保证线程安全性和可见性" class="headerlink" title="保证线程安全性和可见性"></a>保证线程安全性和可见性</h3><p>对于框架的开发人员，对线程安全性和可见性的深入理解是最基本的要求。需要开发人员，在写每一行代码时都应在潜意识中确保其正确性。因为这种代码，在小并发下做功能测试时，会显得很正常。但在高并发下就会出现莫明其妙的问题，而且场景很难重现，极难排查。</p><h3 id="尽早失败和前置断言"><a href="#尽早失败和前置断言" class="headerlink" title="尽早失败和前置断言"></a>尽早失败和前置断言</h3><p>尽早失败也应该成为潜意识，在有传入参数和状态变化时，均在入口处全部断言。一个不合法的值和状态，在第一时间就应报错，而不是等到要用时才报错。因为等到要用时，可能前面已经修改其它相关状态，而在程序中很少有人去处理回滚逻辑。这样报错后，其实内部状态可能已经混乱，极易在一个隐蔽分支上引发程序不可恢复。</p><h3 id="分离可靠操作和不可靠操作"><a href="#分离可靠操作和不可靠操作" class="headerlink" title="分离可靠操作和不可靠操作"></a>分离可靠操作和不可靠操作</h3><p>这里的可靠是狭义的指是否会抛出异常或引起状态不一致，比如，写入一个线程安全的 Map，可以认为是可靠的，而写入数据库等，可以认为是不可靠的。开发人员必须在写每一行代码时，都注意它的可靠性与否，在代码中尽量划分开，并对失败做异常处理，并为容错，自我保护，自动恢复或切换等补偿逻辑提供清晰的切入点，保证后续增加的代码不至于放错位置，而导致原先的容错处理陷入混乱。</p><h3 id="异常防御，但不忽略异常"><a href="#异常防御，但不忽略异常" class="headerlink" title="异常防御，但不忽略异常"></a>异常防御，但不忽略异常</h3><p>这里讲的异常防御，指的是对非必须途径上的代码进行最大限度的容忍，包括程序上的 BUG，比如：获取程序的版本号，会通过扫描 Manifest 和 jar 包名称抓取版本号，这个逻辑是辅助性的，但代码却不少，初步测试也没啥问题，但应该在整个 getVersion() 中加上一个全函数的 try-catch 打印错误日志，并返回基本版本，因为 getVersion() 可能存在未知特定场景异常，或被其他的开发人员误修改逻辑(但一般人员不会去掉 try-catch)，而如果它抛出异常会导致主流程异常，这是我们不希望看到的。但这里要控制个度，不要随意 try-catch，更不要无声无息的吃掉异常。</p><h3 id="缩小可变域和尽量-final"><a href="#缩小可变域和尽量-final" class="headerlink" title="缩小可变域和尽量 final"></a>缩小可变域和尽量 final</h3><p>如果一个类可以成为不变类(Immutable Class)，就优先将它设计成不变类。不变类有天然的并发共享优势，减少同步或复制，而且可以有效帮忙分析线程安全的范围。就算是可变类，对于从构造函数传入的引用，在类中持有时，最好将字段 final，以免被中途误修改引用。不要以为这个字段是私有的，这个类的代码都是我自己写的，不会出现对这个字段的重新赋值。要考虑的一个因素是，这个代码可能被其他人修改，他不知道你的这个弱约定，final 就是一个不变契约。</p><h3 id="降低修改时的误解性，不埋雷"><a href="#降低修改时的误解性，不埋雷" class="headerlink" title="降低修改时的误解性，不埋雷"></a>降低修改时的误解性，不埋雷</h3><p>前面不停的提到代码被其他人修改，这也开发人员要随时紧记的。这个其他人包括未来的自己，你要总想着这个代码可能会有人去改它。我应该给修改的人一点什么提示，让他知道我现在的设计意图，而不要在程序里面加潜规则，或埋一些容易忽视的雷，比如：你用 null 表示不可用，size 等于 0 表示黑名单，这就是一个雷，下一个修改者，包括你自己，都不会记得有这样的约定，可能后面为了改某个其它 BUG，不小心改到了这里，直接引爆故障。对于这个例子，一个原则就是永远不要区分 null 引用和 empty 值。</p><h3 id="提高代码的可测性"><a href="#提高代码的可测性" class="headerlink" title="提高代码的可测性"></a>提高代码的可测性</h3><p>这里的可测性主要指 Mock 的容易程度，和测试的隔离性。至于测试的自动性，可重复性，非偶然性，无序性，完备性(全覆盖)，轻量性(可快速执行)，一般开发人员，加上 JUnit 等工具的辅助基本都能做到，也能理解它的好处，只是工作量问题。这里要特别强调的是测试用例的单一性(只测目标类本身)和隔离性(不传染失败)。现在的测试代码，过于强调完备性，大量重复交叉测试，看起来没啥坏处，但测试代码越多，维护代价越高。经常出现的问题是，修改一行代码或加一个判断条件，引起 100 多个测试用例不通过。时间一紧，谁有这个闲功夫去改这么多形态各异的测试用例？久而久之，这个测试代码就已经不能真实反应代码现在的状况，很多时候会被迫绕过。最好的情况是，修改一行代码，有且只有一行测试代码不通过。如果修改了代码而测试用例还能通过，那也不行，表示测试没有覆盖到。另外，可 Mock 性是隔离的基础，把间接依赖的逻辑屏蔽掉。可 Mock 性的一个最大的杀手就是静态方法，尽量少用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式服务框架维护人员增多或变更，会出现质量的下降的问题，尤其是框架代码，要时刻牢记的细节。可能下面要讲的这些，大家都会觉得很简单，很基础，但要做到时刻牢记。在每一行代码中都考虑这些因素，是需要很大耐心的。&lt;/p&gt;
&lt;h3 id=&quot;防止空指针和下标越界&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="springboot" scheme="https://github.com/weiecho/tags/springboot/"/>
    
      <category term="cloud" scheme="https://github.com/weiecho/tags/cloud/"/>
    
      <category term="分布式" scheme="https://github.com/weiecho/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Apollo分布式配置中心快速入门</title>
    <link href="https://github.com/weiecho/2019/11/02/stu_1112/"/>
    <id>https://github.com/weiecho/2019/11/02/stu_1112/</id>
    <published>2019-11-02T04:21:22.000Z</published>
    <updated>2020-07-03T02:32:12.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p></blockquote><p>项目地址：<a href="https://github.com/ctripcorp/apollo">apollo分布式配置中心</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/stu/20123155442.png" alt="image" title="apollo">                </div>                <div class="image-caption">apollo</div>            </figure><h3 id="1、关键词"><a href="#1、关键词" class="headerlink" title="1、关键词"></a>1、关键词</h3><p>AppId：唯一指定项目/配置的id，需在项目设置指定app.id</p><p>ENV：当前获取的配置环境，对应DEV/FAT/UAT/PRO等</p><p>Namespace：根据命名空间划分每一类配置的</p><p>Cluster：多集群环境状况下的配置实现，默认为default</p><p>关联：可以关联的Public Namespace覆盖特殊属性</p><h3 id="2、操作点"><a href="#2、操作点" class="headerlink" title="2、操作点"></a>2、操作点</h3><p>发布：将调整后未发布的配置部署至应用可用状态</p><p>回滚：回滚至确实有修改的上一发布版本</p><p>灰度：可根据服务节点IP或AppId(public) 部分生效配置，可以全量发布</p><p>创建Cluster：创建不同的配置集群</p><p>创建/关联Namespace：创建或关联Namespace</p><h3 id="3、核心点"><a href="#3、核心点" class="headerlink" title="3、核心点"></a>3、核心点</h3><p>项目AppId：请为每一个服务创建并配置独立的appId</p><p>宿主机ENV：当前应用所在的环境，请设置 /opt/settings/server.properties</p><p>apollo.meta：当前应用环境连接的注册中心地址，请设置/opt/settings/server.properties</p><p>Private：当前AppId私有的命名空间配置属性</p><p>Public：所有项目可以公用的命名空间配置属性</p><p>多Namespace：项目中可配置多个命名空间，namespaces: bootstrap,application,dubbo</p><p>Public关联/覆盖：如需修改Public配置，请关联Namepace到当前项目配置后覆盖属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://github.com/weiecho/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="配置中心" scheme="https://github.com/weiecho/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
      <category term="apollo" scheme="https://github.com/weiecho/tags/apollo/"/>
    
  </entry>
  
  <entry>
    <title>JVM性能优化建议</title>
    <link href="https://github.com/weiecho/2019/10/20/exp_1113/"/>
    <id>https://github.com/weiecho/2019/10/20/exp_1113/</id>
    <published>2019-10-20T14:30:31.000Z</published>
    <updated>2020-07-03T02:03:50.817Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优化建议：</span><br><span class="line">1、一般建议Xms等于Xmx，好处是避免每次gc后，调整堆的大小，减少系统内存分配开销</span><br><span class="line">2、串行垃圾收集器(Serial + Serial Old |  -XX:+UseSerialGC)</span><br><span class="line">3、并行垃圾收集器(Parellel + Parellel Old)，吞吐量优先（JVM server 模式 默认）</span><br><span class="line">4、并发垃圾收集器（ParNew + CMS）响应时间优先</span><br><span class="line">5、本次优化说明的JDK版本为1.8</span><br></pre></td></tr></table></figure><h4 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h4><p>1、java -Xmx2g -Xms2g -XX:MetaspaceSize=256m -XX:+UseConcMarkSweepGC</p><h4 id="并发大，对象小"><a href="#并发大，对象小" class="headerlink" title="并发大，对象小"></a>并发大，对象小</h4><p>2、java -Xmx2g -Xms2g -Xmn512m  -XX:MetaspaceSize=256m -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=2  -XX:+UseCMSCompactAtFullCollection</p><h4 id="并发大，对象大"><a href="#并发大，对象大" class="headerlink" title="并发大，对象大"></a>并发大，对象大</h4><p>3、java -Xmx4g -Xms4g -Xmn2g  -XX:MetaspaceSize=512m -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=2  -XX:+UseCMSCompactAtFullCollection</p><table><thead><tr><th>核心参数</th><th>说明</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>-Xms</td><td>最小堆内存</td><td></td><td>默认为物理内存的1/64，不会超过1G</td></tr><tr><td>-Xmx</td><td>最大堆内存</td><td></td><td>默认为物理内存的1/4</td></tr><tr><td>-Xmn</td><td>新生代内存大小</td><td></td><td>默认值为-Xmx的3/8，老年代内存则为5/8 优先级较NewRatio高</td></tr><tr><td>-XX:NewRatio</td><td>新生代与老生代的内存的比值</td><td>2</td><td></td></tr><tr><td>-XX:SurvivorRatio</td><td>Eden和2个存活区内存的比值</td><td>8</td><td></td></tr><tr><td>-XX:MetaspaceSize</td><td>元空间最小值</td><td></td><td>元空间并不在虚拟机中，而是使用本地内存</td></tr><tr><td>-XX:MaxMetaspaceSize</td><td>元空间最大值</td><td></td><td></td></tr><tr><td>-Xss</td><td>栈大小</td><td>1M</td><td></td></tr><tr><td>-XX:ParallelGCThreads</td><td>并行收集器的线程数</td><td>默认为服务器CPU数目</td><td>此值最好配置与处理器数目相等 同样适用于CMS不用设置</td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>手动指定对象大小</td><td></td><td>当对象达到指定大小时直接存放到老年代中，由于新生代大多使用复制算法，为了节省复制消耗</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>手动设置对象在新生代中存活年龄(存活次数)</td><td>15</td><td></td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>手动指定老年代使用CMS收集器</td><td></td><td></td></tr><tr><td>-XX:-CMSParallelRemarkEnabled</td><td>手动配置开启并行标记，节省年轻代标记时间</td><td></td><td>废弃</td></tr><tr><td>-XX:CMSInitiatingOccupancyFraction=80</td><td>手动指定当老年代已用空间达到80%时，触发老年代回收(默认92%)</td><td>-1</td><td></td></tr><tr><td>-XX:+UseCMSCompactAtFullCollection</td><td>在进行Full GC时对内存进行压缩</td><td></td><td>JDK1.6以前不需要配置，默认开启</td></tr><tr><td>-XX:CMSFullGCsBeforeCompaction=2</td><td>与XX:+UseCMSCompactAtFullCollection关联使用标识着每经过多少次Full GC</td><td>0</td><td>触发对内存进行一次压缩，默认是0次</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="架构设计" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="JVM" scheme="https://github.com/weiecho/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计实现的健壮性</title>
    <link href="https://github.com/weiecho/2019/10/07/exp_1114/"/>
    <id>https://github.com/weiecho/2019/10/07/exp_1114/</id>
    <published>2019-10-07T14:30:31.000Z</published>
    <updated>2020-07-03T02:03:46.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>日志是发现问题、查看问题一个最常用的手段。日志质量往往被忽视，没有日志使用上的明确约定。重视 Log 的使用，提高 Log 的信息浓度。日志过多、过于混乱，会导致有用的信息被淹没。</p><p>要有效利用这个工具要注意：</p><h4 id="严格约定WARN、ERROR级别记录的内容"><a href="#严格约定WARN、ERROR级别记录的内容" class="headerlink" title="严格约定WARN、ERROR级别记录的内容"></a>严格约定WARN、ERROR级别记录的内容</h4><p>WARN 表示可以恢复的问题，无需人工介入。<br>ERROR 表示需要人工介入问题。<br>有了这样的约定，监管系统发现日志文件的中出现 ERROR 字串就报警，又尽量减少了发生。过多的报警会让人疲倦，使人对报警失去警惕性，使 ERROR 日志失去意义。再辅以人工定期查看 WARN 级别信息，以评估系统的“亚健康”程度。</p><h4 id="日志中，尽量多的收集关键信息"><a href="#日志中，尽量多的收集关键信息" class="headerlink" title="日志中，尽量多的收集关键信息"></a>日志中，尽量多的收集关键信息</h4><p>出问题时的现场信息，即排查问题要用到的信息。如服务调用失败时，要给出使用 Dubbo 的版本、服务提供者的 IP、使用的是哪个注册中心；调用的是哪个服务、哪个方法等等。这些信息如果不给出，那么事后人工收集的，问题过后现场可能已经不能复原，加大排查问题的难度。<br>如果可能，给出问题的原因和解决方法。这让维护和问题解决变得简单，而不是寻求精通者（往往是实现者）的帮助。</p><h4 id="同一个或是一类问题不要重复记录多次"><a href="#同一个或是一类问题不要重复记录多次" class="headerlink" title="同一个或是一类问题不要重复记录多次"></a>同一个或是一类问题不要重复记录多次</h4><p>同一个或是一类异常日志连续出现几十遍的情况，还是常常能看到的。人眼很容易漏掉淹没在其中不一样的重要日志信息。要尽量避免这种情况。在可以预见会出现的情况，有必要加一些逻辑来避免。</p><p>如为一个问题准备一个标志，出问题后打日志后设置标志，避免重复打日志。问题恢复后清除标志。</p><p>虽然有点麻烦，但是这样做保证日志信息浓度，让监控更有效。</p><h2 id="界限设置"><a href="#界限设置" class="headerlink" title="界限设置"></a>界限设置</h2><p>资源是有限的，CPU、内存、IO 等等。不要因为外部的请求、数据不受限的而崩溃。</p><h4 id="线程池-ExectorService-的大小和饱和策略"><a href="#线程池-ExectorService-的大小和饱和策略" class="headerlink" title="线程池(ExectorService)的大小和饱和策略"></a>线程池(ExectorService)的大小和饱和策略</h4><p>Server 端用于处理请求的 ExectorService 设置上限。ExecutorService 的任务等待队列使用有限队列，避免资源耗尽。当任务等待队列饱和时，选择一个合适的饱和策略。这样保证平滑劣化。</p><p>在一些设计中，饱和策略是丢弃数据，等待结果也只是请求的超时。</p><p>达到饱和时，说明已经达到服务提供方的负荷上限，要在饱和策略的操作中日志记录这个问题，以发出监控警报。记得注意不要重复多次记录哦。（注意，缺省的饱和策略不会有这些附加的操作。）根据警报的频率，已经决定扩容调整等等，避免系统问题被忽略。</p><h4 id="集合容量"><a href="#集合容量" class="headerlink" title="集合容量"></a>集合容量</h4><p>如果确保进入集合的元素是可控的且是足够少，则可以放心使用。这是大部分的情况。如果不能保证，则使用有有界的集合。当到达界限时，选择一个合适的丢弃策略。</p><h2 id="容错-重试-恢复"><a href="#容错-重试-恢复" class="headerlink" title="容错-重试-恢复"></a>容错-重试-恢复</h2><p>高可用组件要容忍其依赖组件的失败。</p><h4 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h4><p>目前服务注册中心使用了数据库来保存服务提供者和消费者的信息。注册中心集群不同注册中心也通过数据库来进行同步数据，以感知其它注册中心上提供者的变化。注册中心会在内存中保存一份提供者和消费者数据，数据库不可用时，注册中心独立对外提供服务以保证正常运转，只是拿不到其它注册中心的数据。当数据库恢复时，重试逻辑会将内存中修改的数据写回数据库，并拿到数据库中新数据。</p><h4 id="服务的消费者"><a href="#服务的消费者" class="headerlink" title="服务的消费者"></a>服务的消费者</h4><p>服务消费者从注册中心拿到提供者列表后，会保存提供者列表到内存和磁盘文件中。这样注册中心宕机后消费者可以正常运转，甚至可以在注册中心宕机过程中重启消费者。消费者启动时，发现注册中心不可用，会读取保存在磁盘文件中提供者列表。重试逻辑保证注册中心恢复后，更新信息。</p><h2 id="重试延迟策略"><a href="#重试延迟策略" class="headerlink" title="重试延迟策略"></a>重试延迟策略</h2><h4 id="数据库上的活锁"><a href="#数据库上的活锁" class="headerlink" title="数据库上的活锁"></a>数据库上的活锁</h4><p>注册中心会定时更新数据库一条记录的时间戳，这样集群中其它的注册中心感知它是存活。过期注册中心和它的相关数据 会被清除。数据库正常时，这个机制运行良好。但是数据库负荷高时，其上的每个操作都会很慢。这就出现：</p><p>A 注册中心认为 B 过期，删除 B 的数据。 B 发现自己的数据没有了，重新写入自己的数据的反复操作。这些反复的操作又加重了数据库的负荷，恶化问题。</p><h4 id="可以使用下面逻辑："><a href="#可以使用下面逻辑：" class="headerlink" title="可以使用下面逻辑："></a>可以使用下面逻辑：</h4><p>当 B 发现自己数据被删除时（写入失败），选择等待这段时间再重试。重试时间可以选择指数级增长，如第一次等 1 分钟，第二次 10 分钟、第三次 100 分钟。</p><p>这样操作减少后，保证数据库可以冷却（Cool Down）下来。</p><h4 id="Client-重连注册中心"><a href="#Client-重连注册中心" class="headerlink" title="Client 重连注册中心"></a>Client 重连注册中心</h4><p>当一个注册中心停机时，其它的 Client 会同时接收事件，而去重连另一个注册中心。Client 数量相对比较多，会对注册中心造成冲击。避免方法可以是 Client 重连时随机延时 3 分钟，把重连分散开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h2&gt;&lt;p&gt;日志是发现问题、查看问题一个最常用的手段。日志质量往往被忽视，没有日志使用上的明确约定。重视 Log 的使用，提高 Log 的信息浓度。日志
      
    
    </summary>
    
    
      <category term="经验分享" scheme="https://github.com/weiecho/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="微服务" scheme="https://github.com/weiecho/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="spring" scheme="https://github.com/weiecho/tags/spring/"/>
    
      <category term="架构设计" scheme="https://github.com/weiecho/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>XXL-JOB分布式任务调度平台</title>
    <link href="https://github.com/weiecho/2019/10/03/tool_1112/"/>
    <id>https://github.com/weiecho/2019/10/03/tool_1112/</id>
    <published>2019-10-03T05:23:12.000Z</published>
    <updated>2020-07-03T02:04:29.411Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>XXL-JOB是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p></blockquote><p>项目地址：<a href="http://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener">xxl-job分布式任务调度平台</a></p><ul><li>简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</li><li>动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</li><li>调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</li><li>执行器HA（分布式）：任务分布式执行，任务”执行器”支持集群部署，可保证任务执行HA；</li><li>注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li><li>弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li><li>路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li><li>故障转移：任务路由策略选择”故障转移”情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</li><li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li><li>任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</li><li>任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</li><li>分片广播任务：执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</li><li>动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</li><li>事件触发：除了”Cron方式”和”任务依赖方式”触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发。</li><li>任务进度监控：支持实时监控任务进度；</li><li>Rolling实时日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志；</li><li>GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。</li><li>脚本任务：支持以GLUE模式开发和运行脚本任务，包括Shell、Python、NodeJS、PHP、PowerShell等类型脚本;</li><li>命令行任务：原生提供通用命令行任务Handler（Bean任务，”CommandJobHandler”）；业务方只需要提供命令行即可；</li><li>任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；</li><li>一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；</li><li>自定义任务参数：支持在线配置调度任务入参，即时生效；</li><li>调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；</li><li>数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；</li><li>邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；</li><li>推送maven中央仓库: 将会把最新稳定版推送到maven中央仓库, 方便用户接入和使用;</li><li>运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；</li><li>全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；</li><li>跨平台：原生提供通用HTTP任务Handler（Bean任务，”HttpJobHandler”）；业务方只需要提供HTTP链接即可，不限制语言、平台；</li><li>国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；</li><li>容器化：提供官方docker镜像，并实时更新推送dockerhub，进一步实现产品开箱即用；</li><li>线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入”Slow”线程池，避免耗尽调度线程，提高系统稳定性；</li><li>用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；</li><li>权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;XXL-JOB是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;http://www.xux
      
    
    </summary>
    
    
      <category term="常用工具" scheme="https://github.com/weiecho/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="https://github.com/weiecho/tags/java/"/>
    
      <category term="开源工具" scheme="https://github.com/weiecho/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="定时任务" scheme="https://github.com/weiecho/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
